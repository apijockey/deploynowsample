{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"APIJockey TEST Online Help","text":"<p>APIJockey TEST will help you assess and verify web services responses and automate this assessment.</p>"},{"location":"#whats-new","title":"What's new","text":"<ul> <li>Improved support for large files (2000+ lines)</li> <li>Context sensitive help and one-click searchable WSDL definitions for elements and types beyond simple text search, see Concepts Help</li> <li>Multi window support </li> <li>Databased testcase tables and randomized valuelist tables support selections to limit the rows taken into account for data retrieval</li> <li>NON-SLA support has been added via servicedesk@apijockey.com </li> </ul>"},{"location":"#important-features","title":"Important features","text":"<ul> <li>Import and view WSDL definitions</li> <li>instant test runs on your current selection</li> <li>Run data-based testcases</li> <li>A full featured WSDL schema validation</li> <li>MTOM-Support for SOAP request and SOAP response</li> <li>Syntax Highlighting for XML, JSONPath and JSON</li> <li>Randomized value lists and data type specific ranges</li> <li>Data transfer with XPath, XQuery and JSONPath</li> <li>Assertions with XPath, JSONPath or Javascript </li> <li>Business test friendly assertion support to reduce detailed knowledge about query-languages like XPath and JSONPath</li> <li>Run Environment support to centralize authentication and URL-information </li> <li>Variables and Run Environment variables support for requests, urls, XPath, JSONPath and XQuery expressions</li> <li>Persist test executions with comprehensive storage of test step details</li> <li>Builtin iCloud-synchronization support of your configuration and definitions for all your MacOS devices</li> <li>Share your definitions with a comprehensive set of import and export features</li> <li>Context sensitive help and one-click searchable WSDL definitions for elements and types</li> <li>NON-SLA support has been added via servicedesk@apijockey.com to get in touch with us for new requirements or bugs </li> </ul>"},{"location":"#user-guides","title":"User Guides","text":"<ul> <li>Concepts</li> <li>Data based test</li> <li>Run environments</li> </ul>"},{"location":"#reference","title":"Reference","text":"<ul> <li>Test hierarchy views</li> <li>Teststep views</li> <li>Configuration views and editors</li> <li>Copy and Paste</li> <li>Collaborate</li> <li>Release notes</li> </ul>"},{"location":"#tutorials","title":"Tutorials","text":"<ul> <li>Getting started</li> <li>Create your first tests</li> <li>Create databased testcase</li> <li>Random test data support</li> </ul>"},{"location":"collaborate/","title":"Import and export your test definitions","text":"<p>APIJockey Test helps you define and run your tests. There will be situations where</p> <ul> <li>you want to share your tests with others or</li> <li>want to  run tests in APIJockey Test that you created in other solutions</li> </ul> <p>This is where import and export of tests comes in handy. The export and import uses a JSON-structure, which is described below in more detail.</p>"},{"location":"collaborate/#import-and-export-options","title":"Import and export options","text":"<p>You can import and export</p> <ul> <li>A selection of Testcases</li> <li>A selection of Testsets</li> <li>A selection of Repositories</li> </ul>"},{"location":"collaborate/#export-a-selection-of-testcases","title":"Export a selection of testcases","text":"<p>If you want to export a Testcase selection (one or several Testcases), you need to select these Testcases and press</p> <p>export selected Testcases.</p> <p> </p> <p>When you click the button, a save as Dialog appears with a preset filename in the downloads folder.</p> <p></p> <p>After you have confirmed with save you will find the JSON-File in the selected folder.</p>"},{"location":"collaborate/#export-a-selection-of-testsets","title":"Export a selection of testsets","text":"<p>The Testset list view can be hidden or displayed by enabling/disabling the toggle element, IF the Repository list view is enabled. If you see the dropdown list for your repository selection, this toggle is not visible. If you want to export a Testset selection (one or several Testsets), you need to select these Testsets and press export selected Testsets.</p> <p> </p> <p>When you click the button, a save as Dialog appears with a preset filename in the downloads folder.</p> <p> </p> <p>After you have confirmed with Save you will find the JSON-File in the selected folder.</p>"},{"location":"collaborate/#export-a-selection-of-repositories","title":"Export a selection of Repositories","text":"<p>If you want to export a Repository selection (on or several Repositories, select these Repositories.</p> <p> </p> <p>When you click the button, a save as Dialog appears with a preset filename in the downloads folder. This follows the same rules as for testcases and testsets, but uses the termin Repository as the start of the filename.</p>"},{"location":"collaborate/#import-testcases","title":"Import testcases","text":"<p>When you want to import Testcases, you must press the import elements button in the Testcase List View</p> <p> </p> <p>This button makes no distinction of your current selection and would simple add Testcases to the current Testcase list. When you press the button, an Open Dialog comes up, where you can select any file. A Testcase Decoder will try to read a JSON-structure representing a list of 1 - n Testcases. If this is successful, the Testcase will appear in the list with Testcase names prefixed with the filename that you chose. Assume we had exported the existing Testcase and would import it back, we would get the following list:</p> <p> </p>"},{"location":"collaborate/#import-testsets","title":"Import testsets","text":"<p>When you want to import Testsets, you must press the import elements button in the Testset List View</p> <p>![screenshot with button import testsets] (storage/ImportTestsets.png) </p> <p>This import action makes no distinction of your current selection and would simply add Testcases to the current Testcase list. When you press the button, an Open Dialog comes up, where you can select any file. A Testcase Decoder will try to read a JSON-structure representing a list of 1 - n Testcases. If this is successful, the Testsets will appear in the list with Testcase names prefixed by the filename that you chose. Assume we had exported the existing Testcase and would import it back, we would get the following list:</p> <p> </p>"},{"location":"collaborate/#import-repositories","title":"Import repositories","text":"<p>The Repository list view can be displayed as dropdown list or as an editable list view, When you want to import Testsets, you must press the import elements button in the Testset List View</p> <p> </p> <p>This import action makes no distinction of your current selection and would simply add Repositories to the current Repository list. When you press the button, an Open Dialog comes up, where you can select any file. A Repository Decoder will try to read a JSON-structure representing a list of 1 - n Repositories. If this is successful, the repositories will appear in the list with Repository names prefixed by the filename that you chose. Assume we had exported the existing repository and would import it back, we would get the following list:</p> <p> </p>"},{"location":"collaborate/#scope-of-an-export-and-import","title":"Scope of an export and import","text":"<p>The export and import facility will include everything that you can define in the Testdefinition hierarchy</p> <ul> <li>Variables</li> <li>Assertions</li> <li>ValueProvider</li> <li>ValueTransfers (Link between Variables and ValueProviders</li> </ul> <p>Not included are these elements</p> <ul> <li>Service definitions</li> <li>Run Environments</li> <li>Run Executions</li> </ul> <p>This means, if you export an HTTP Teststeps and SOAPTeststeps that have a ServiceDefinitionReference, the one that would import it, MUST first create these ServiceDefinitions. If not the import reacts as follows:</p> <ul> <li>An HTTP Teststep will be imported, but without ServiceDefinitionReference</li> <li>A SOAP Teststep that does not find a ServiceDefinition will lead to an import failure. See Options to import SOAP Teststeps to understand alternatives and prerequisites.</li> </ul>"},{"location":"collaborate/#options-to-import-soap-requeststests","title":"Options to import SOAP Requests/tests","text":"<p>SOAP Requests can be included in HTTP Teststeps and SOAP Teststeps. The basic difference is three degree of support in the test definition</p> <ul> <li>HTTP Teststeps do not support schema validation</li> <li>HTTP Teststeps have no reference to a WSDL</li> <li>SOAP Teststeps require this reference and can therefore perform a schema validation</li> <li>SOAP Teststeps allow you to define XPath-based validations, which is not available for HTTP Teststeps</li> </ul> <p>When you import a SOAP Request/Test you will need to decide which Teststep you want to create in APIJockey Test, as the Teststep Decoder identifies the type of Teststeps and creates a new instance of this exact type.</p> <p>With these, you may create a custom import or export script to any other third party application. For some of these we provide you sample scripts, for your convenience and without any warrenty or liability.</p>"},{"location":"collaborate/#possible-error-situations","title":"Possible error situations","text":"<p>When you import a JSON that does not conform to the exected input, like:</p> <ul> <li>You try to import testcases in the testset or repository list or vice versa</li> <li>You try to import any JSON structure that does not represent the expected structure</li> </ul> <p>the import will fail, and eventually report the missing JSON key.</p> <p>When you try to import a SOAP Teststeps, the decoder will try to find the referenced WSDL / Binding / SOAP operation in these keys:</p> <ul> <li>serviceDefinition, this key must contain a URL that returns the WSDL. This WSDL must be present as  WSDL Service Definition Content </li> <li>wsdlServiceBindingQName, this key value must contain a QName with the target namespace of the service definition and the Binding name.</li> <li>soapoperationQName, this key value must must contain a QName with the target namespace of the service definition and the soap operation name.</li> </ul> <p></p>"},{"location":"collaborate/#sample-scripts-to-export-from-third-party-applications","title":"Sample scripts to export from third party applications","text":"<p>You can download a sample groovy script to export SOAP Teststeps to the supported imported/exported JSON-format.</p> <p>This script is provided under the MIT License (see opensource.org), please make sure you understand and accept this license, before you use the script. Steps to use this script</p> <ul> <li>You create a groovy script as a teststep in SoapUI or ReadyAPI, and copy the provided groovy script</li> <li>Modification details are provided within the script.</li> <li>Please understand, this script is made with best intentions to support collaboration, but changes may occur in these third party applications that we are not aware of, you use this script at your own risk.</li> </ul> <p>soapuiexport groovy script</p>"},{"location":"concepts/","title":"APIJockey TEST concepts","text":"<p>APIJockey TEST is a webservice test application. Webservices have been around for a long time now, starting with SOAP whereas current implementations focus on JSON-based implementations with or without a REST architecture. Testing web services isnt' an easy task, there is no user interface, there are no visualizable business processes, data models are based on technical structures, use keys and reference ids. Creating valid requests is time-consuming and verifying responses is even harder. APIJockey TEST will help you to create requests, assess and verify web services responses and automate this assessment to a certain degree. All information is stored in a SQLite database and backed by iCloud integration, which ensures you can access your data from different MacOS \u00ae computers.</p> <ol> <li>instant test runs</li> <li>persisted test executions</li> </ol>"},{"location":"concepts/#instant-test-runs","title":"Instant test runs","text":"<p>This test is available on all four test definition hierarchies.</p> <ul> <li>Repository</li> <li>Testset</li> <li>Testcase</li> <li>Teststep</li> </ul> <p>All test runnable elements provide a play button that starts the test run. A result status icon provides visible information of the test result status.</p> <p></p> <p>Above: screenshot of the teststep action buttons with test run result icon</p>"},{"location":"concepts/#persisted-test-executions","title":"Persisted test executions","text":"<p>Test executions are persisted test runs. They can be started from the repository or testset list view and perform basically the same test operations as an instant test run. The difference is that the test execution results are persisted and can be accessed at any point in time. This gives you a great opportunity to get back to previous runs and compare requests and responses.</p> <p></p> <p>Above: screenshot of the test execution view  When you select a test execution, you will see the list of testcase executions and teststeps execution, drilled down to each indivudal Random and Teststep Value Provider output value.</p>"},{"location":"concepts/#test-definition","title":"Test definition","text":"<p>APIJockey TEST organizes tests in a test definition hierarchy. A test definition describes a test case with its test steps and the assertions defined on the teststeps. That means, a test case can be passed in a test run only, when all teststeps can be run through and all assertions have passed.</p>"},{"location":"concepts/#repository","title":"Repository","text":"<p>First step in the test definition is the creation of a repository. You can create as many repositories as you want. A Repository contains a structure of test cases AND you can execute the contained testcases.Repositories are intended to support several container types, although APIJockey TEST currently supports one local SQLLite (specifically CoreData\u00a9 an Apple product) database, only. They help you group your tests and support persisted test executions.</p> <p>See, how to create a test definition  Organize your repostories in the Repository list view</p>"},{"location":"concepts/#testset","title":"Testset","text":"<p>Once you have created a repository, you start to create Testsets. Testsets contain the actual Testcases. Testsets can be applied for various differenciations like use cases, types of tests (regression tests, new development).  Testing includes several tasks, such as:</p> <ul> <li> <p>regressions testing</p> </li> <li> <p>test new functionality</p> </li> <li> <p>exploration testing</p> </li> <li> <p>persisted test run executions</p> </li> <li> <p>Testsets will help you to organize large sets of Testcases. Find help to manage your testsets in Testset list view </p> </li> <li> <p>Testsets should not be used to differenciate test environments. </p> </li> <li> <p>Testsets make also sense, when Testcases use common variable data. </p> </li> </ul> <p>Find help to manage your testsets in the Testset list view</p>"},{"location":"concepts/#testcase","title":"Testcase","text":"<p>A testcase  - represents what you want to test.</p> <ul> <li> <p>defines the teststeps, the assertions and validations to test a functionality.</p> </li> <li> <p>can include several endpoints</p> </li> <li> <p>can run with  randomized data and capture data from its test steps</p> </li> <li> <p>has run successfully, if all Teststeps have run successfully. There are two types of testcases:</p> </li> <li>A testcase that runs each teststep once.</li> <li>A data based testcase that runs teststeps based on a set of input data for each entry in this data set. </li> </ul> <p>Find help to manage your testcases in Testcase list view) You define the actual Testcase on a Testset. You can create an arbitrary number of Testcases on a Testset.</p>"},{"location":"concepts/#teststep","title":"Teststep","text":"<p>APIJockey TEST supports a numbe of teststeps that you can create and arrange however you like and need to A Teststep is a concrete step in you Testcase run.   - You run a SOAPTeststep or HTTPTeststep to send a request and receive a response.   - You may assert this response.   - You may tranfer response information to a variable which in turn is a prerequisite of subsequent teststeps. Each of these teststeps has configuration options, see how to create: </p> <ul> <li> <p>HTTP Teststep</p> </li> <li> <p>SOAP Teststep</p> </li> <li> <p>Manual RandomizedValuelistTeststep</p> </li> <li> <p>RandomizeTeststep</p> </li> <li> <p>RandomizedValuelistTeststep</p> </li> </ul> <p>Organize your tests in the Teststep list view</p> <ul> <li> <p>Manage your View RandomizedValuelistTeststep</p> </li> <li> <p>Manage your View Manual RandomizedValuelistTeststep</p> </li> <li> <p>Manage your View DatatransferTeststep</p> </li> </ul> <p>These teststeps can be combined. You can even define data input teststeps that allow you to iterate over a set of data. The following sample demonstrate a set of  web service  eststeps, together with a Datatransferteststep and a Randomizeteststep.</p> <ul> <li> <p>The Data Loop Input Teststep defines a set of data to iterate over.</p> </li> <li> <p>getData requests data from a web service</p> </li> <li> <p>transfer retrieves response data and stores them in variables.</p> </li> <li> <p>randomize dates provides random dates (effective dates)</p> </li> <li> <p>getChange requests a quote for change to an existing contract</p> </li> <li> <p>setChangeTransfer provides data from getChange to setChange</p> </li> <li> <p>setChange requests the actual change on the existing contract</p> </li> <li> <p>StatusSetChange store response data for the final step</p> </li> <li> <p>Data Loop Result Teststep stores the current loop results in an internal table that may be exported on user request.</p> </li> </ul> <p>All this without ANY coding. </p>"},{"location":"concepts/#variables","title":"Variables","text":"<p>A Variable holds a persisted value. It is intended to reuse data acroll test hierarchies and elements.</p>"},{"location":"concepts/#conceptual-overview","title":"Conceptual Overview","text":"<p>A Variable can be defined for the four following test definition hierarchy elements. A Variable name must be unique for an element it is assigned to.</p>"},{"location":"concepts/#variable-holder-types","title":"Variable Holder types","text":"<p>Variables can be assigned to these four test definition elements, sometimes referred to as holder types - Repository</p> <ul> <li> <p>Testset</p> </li> <li> <p>Testcase</p> </li> <li> <p>Teststep</p> </li> </ul>"},{"location":"concepts/#variable-types","title":"Variable types","text":"<p>The variable type depends on the selected tab in the editor: - String  Arbitrary Text</p> <ul> <li> <p>Password  Any text. This types hides the value in the variable list view and during edits and be undisclosed on demand</p> </li> <li> <p>absolute Date Enter a static date to reproduce tests. The Variable Editor provides a convenient means to enter the date and formatting for the service call.</p> </li> <li> <p>relative Date Creates a date relative to the current date. On Test runs, this relative is re-evaluated .This allows you to enter a date of birth or a date of manufacturing and make sure the webservice under test will always calculate the same age.</p> </li> <li> <p>Number  Numbers need specific formatting. This formatting is provided for variables of type number</p> </li> <li> <p>Boolean Booleans have 0 / 1 values. The variable editor allows use of true/false or yes/no as text for the boolean values.</p> </li> </ul>"},{"location":"concepts/#create-a-variable","title":"Create a Variable","text":"<p>Variables can be created on two different places:</p> <ul> <li> <p>In the variables view, this is explained in Variables View</p> </li> <li> <p>In the variables assignment view on Teststep ValueProviders and Random ValueProvider</p> </li> </ul>"},{"location":"concepts/#access-variable-values","title":"Access Variable values","text":"<p>Variable placeholders are simply substituted by their current values, just like a makro.   Variable values can be used in these contexts:</p> <ul> <li> <p>SOAP/HTTP Requests</p> </li> <li> <p>URLs of the SOAP Request</p> </li> <li> <p>XPath expression for Assertions and ValueProviders</p> </li> <li>XQuery expressions for ValueProviders</li> </ul>"},{"location":"concepts/#variable-access-syntax","title":"Variable access syntax","text":"<ul> <li> <p>Teststep variables: $(Teststep.&lt;variablename&gt;)</p> </li> <li> <p>Teststep variables: $(Testcase.&lt;variablename&gt;)</p> </li> <li> <p>Testset variables: $(Testset.&lt;variablename&gt;)</p> </li> <li> <p>Repository variables: $(Repository.&lt;variablename&gt;)</p> </li> </ul>"},{"location":"concepts/#variablevaluetransfer","title":"VariableValueTransfer","text":"<p>When you want to update your variable from within a test step, you will use a VariableValueTransfer, they are the  common component for ValueProviders to transfer data to a variable of type String.</p>"},{"location":"concepts/#attachment-placeholders","title":"Attachment placeholders","text":"<p>Attachment placeholders in SOAP Requests are not variables and use a special, but similar naming convention. see SOAP Attachments VariableValueTransfers are used among these teststeps to configure the output variable:</p> <ul> <li>DatatransferTeststep </li> <li>RandomizeTeststep</li> <li>RandomizedValuelistTeststep</li> <li>Manual RandomizedValuelistTeststep</li> </ul>"},{"location":"concepts/#static-and-variable-test-data","title":"Static and variable test data","text":"<p>User data, response data, derived data and random data are available for your test The most common type of data is user data, ie data that the user enters. A user will enter request data in the request editor.i</p> <p></p> <p>This approach is valid until request data are repeated for several tests and a change in the webservice definition, such as key lists or expected value, would mean a lot of rework. This is, where variables come into the game. </p>"},{"location":"concepts/#response-data-and-derived-data","title":"Response Data and Derived data","text":"<p>A Webservice is - in general - expected to return values, there may be negative test cases, though. You can access both - request and response data - from a  teststep to feed a variable, as shown above, serves as input. APIJockey.com gives two options to to access request and response data:</p> <ul> <li> <p>XPath</p> </li> <li> <p>XQuery</p> </li> <li> <p>JSONPath</p> </li> </ul> <p>In the request, derived data is just a variable as above. XQuery allows for arbitrary transformations of request and response data, so if you need to test several Web services that expect different contents, XQuery is your choice. XPath, XQuery and JSONPath can be used within DatatransferValueProviders, which in turn are part of Datatransferteststeps.</p>"},{"location":"concepts/#random-data","title":"Random Data","text":"<p>APIJockey TEST provides a Randomteststep that allows for randomized data. You can create a list of random value providers without any coding. Typical examples are number plates or Vehicle Identification numbers where you may use a calculated String to create the random value. In the request, this is just a variable as above.</p>"},{"location":"concepts/#help","title":"Help","text":"<p>APIJockey Test provides two sources of help</p> <ul> <li> <p>a searchable online help (this help) https://docs.apijockey.com</p> </li> <li> <p>searchable webservice definitions (WSDL only, from Release 1.7.3)</p> </li> </ul>"},{"location":"concepts/#sample-searchable-webservice-definitions","title":"Sample searchable webservice definitions","text":"<p>Legal Note : The url and the webservice presented below have been provided by oorsprong.org and have been available without authentication. I use these resources for the only reason to illustrate the contextual help feature of APIJockey TEST. Do not misunderstand this as any kind of endorsement for and from oorsprong.org. The request itself has been created with the built-in functionality of APIJockey TEST to create a sample from a WSDL.</p> <p>Let's assume a sample request created from the WSDL.  </p> <p>When working with these APIs, you would probably search the XSD-files for more information.</p> <p>In such a case drag with your mouse the element name that you need information about while holding the CMD-key</p> <p></p> <p>If you want to search for elements or types not present in the current request or response hold the CMD key while you double click with your mouse.</p> <p>Be aware that for processing search with namespace prefixes, the search must be able to locate the correponding XSD-file. This is only possible, if the prefix is defined in the namespace definitions and you hold a valid XML document. If this is not the case, you can search for an element or type in a specific namespace with this notation:</p> <ul> <li> <p>{http://my.namespace.com/context}Elementname</p> </li> <li> <p>{http://my.namespace.com/context}Typename</p> </li> </ul>"},{"location":"conceptual-databasedTestcase/","title":"Databased Testcase","text":"<p>A databased testcase runs its teststeps repeatedly with varying predefined data in a table. The idea is to assess your service under test with different data and verify the results later in a table.</p> <p>This kind of data-based tests can be achieved with the Testcase type Databased Testcase.</p> <p>See the step-by-step tutorial Create a Databased Testcase for more information how to perform this task.</p> <p>A Databased Testcase is a specific Testcase type that you create in the View Testcase List. It uses the following elements:</p> <p>-A Data Loop Input Teststep that contains the data to iterate over</p> <ul> <li> <p>A list of Teststeps that perform the actual service tests with data from the Data Loop Input Teststep</p> </li> <li> <p>A Data Loop Result Teststep that write variable values into a result table </p> </li> </ul>"},{"location":"conceptual-databasedTestcase/#data-loop-input-teststep","title":"Data Loop Input Teststep","text":"<p>This teststep is meant to provide the date for the Data Loop. Depending on our edition (Community Edition or Standard Edition) you have two options to provide your tabular data:</p> <ul> <li> <p>A Manual Table Editor</p> </li> <li> <p>A configurable CSV file input</p> </li> <li> <p>A Query input, see Create a Query-based Valuelist Input</p> </li> </ul> <p>All of these options foresee a mapping between columns of your table and a variable in your Test hierarchy, as you can see in the following screenshot:</p> <p></p> <ul> <li> <p>We define a number of columns for our table</p> </li> <li> <p>We link these columns to variables in our test hierarchy</p> </li> <li> <p>We enter the data (in a manual table) or import the data (and import the column information) from a CSV file</p> </li> <li> <p>When we run this Teststep, the current row data will be read and the information in the row cells will be used to update the referenced variable value</p> </li> <li> <p>Any subsequent Teststep will be able to access the current variable value with the $(Holder.Name)  notation</p> </li> </ul>"},{"location":"conceptual-databasedTestcase/#create-a-query-based-valuelist-input","title":"Create a Query-based valuelist Input","text":"<p>A query-based valuelist input allows you to use a query language like XQuery, XPath or JSONPath to provide variables values from an HTTP/SOAP Teststep response and loop over each element in your Databased Testcase.</p> <p>A query-based valuelist input provides a powerful option to read a list of elements from an HTTP/SOAP Teststep reponse and delivers the top level child elments as columns in table. This is the input for our Databased Testcase Run Loop.</p> <p>The following image shows a sample JSON- response with a number of invoice elements that hold sub elements. We want to iterate over these invoice elements and use the sub elements as columns in an input table, as you would do use a CSV file or a manual table.</p>"},{"location":"conceptual-databasedTestcase/#use-case-of-a-query-based-valuelist-input","title":"Use case of a query-based valuelist input","text":"<p>We will illustrate this with the following use case, as some transformations would apply when querying JSON-Elements or XML-Elements and provide them as  flat table with columns and rows. Let's test a REST-service that exposes two routes:</p> <ul> <li> <p>A route/ressource hosturl/api/json/invoices that returns a list of available invoices with some metadata such as invoice number and company</p> </li> <li> <p>A  route/ressource hosturl/api/json/invoiceNumber/invoicenumber that returns the invoie document with detailed invoice data such as amount and term</p> </li> </ul> <p>We want to verify that each invoice returned from the first route can be received in the second route and want to make sure that the information on the invoice-element corresponds to the metadata returned in the JSON-element.</p> <p></p> <p>Each element is a JSON-Dictionary that holds three key/value-pairs, the webservice call would return 10 invoice elements:</p> <ul> <li> <p>companyname</p> </li> <li> <p>invoicenumber</p> </li> <li> <p>projecttitle</p> </li> </ul> <p>We will apply the following JSONPath to extract the information for each Dictionary in the list and create an Input table for our Databased-Testcase:</p> <p>JSONPath:  $.invoiceElements.*</p> <p></p> <p>Here we go. We have the input for the Databased Testcase Run Loop. Each column entry is automatically assigned to a Variable that has been created for you.                You may use this in call of the second webservice in such a way: </p>"},{"location":"conceptual-databasedTestcase/#databased-testcase-run-details","title":"Databased Testcase Run Details","text":"<p>A Databased Testcase run performs the following logic:</p> <ul> <li> <p>All Teststeps before the the Data Loop Input Teststep will run once</p> </li> <li> <p>All Teststeps between the Data Loop Input Teststep and the Data Loop Result Teststep will run for each row in the Data Loop Input Teststep</p> </li> <li> <p>Each Teststep defines which of the variables it uses, you may use them in the URL as parameter values or in a JSON or SOAP body</p> </li> <li> <p>The Data Loop Result Teststep is the last Teststep that is run repeatedlly</p> </li> <li> <p>All Teststeps after the Data Loop Result Teststep will run once</p> </li> </ul>"},{"location":"conceptual-databasedTestcase/#data-loop-result-teststep","title":"Data Loop Result Teststep","text":"<p>This Teststep gives you the option to write any Variable values in the Test definition hierarchy to a result table. This result table is stored internally and can be exported to a CSV-file.                 You can append new results to the end of the table with new test runs or simply override any existing entry with the option Append to end of file. </p> <p></p> <p>See the step-by-step tutorial Create a Databased Testcase for more information how to perform this task.</p>"},{"location":"conceptual-runenvironment/","title":"Run Environment","text":"<p>A Run Environment is a logical set of services, applications and configurations that companies use for their software development process        to promote development artifacts step-by-step from the local developer machine to production.</p>"},{"location":"conceptual-runenvironment/#examples-of-a-run-environments","title":"Examples of a Run Environments","text":"<ul> <li> <p>A local developer machineo</p> </li> <li> <p>An integrated test environment that developers use to test their components in combination with other connected services, applications and components.</p> </li> <li> <p>A business test environment that business experts use to test software against their business requirements</p> </li> <li> <p>A load and performance test environment&gt;</p> </li> <li> <p>A staging environment with pre-production data</p> </li> </ul> <p>Typical properties of Run Environments</p> <p>When you develop or test webservice, you will need to run these tests against several run environments. Some companies may have one or two Run Environments, others may have five to ten.        The crucial part of testing is to work with different settings for these Run Environments while keeping the Testcase definition stable.</p> <ul> <li> <p>URLs will be different for Run Environments</p> </li> <li> <p>Authentication information may vary , from no or Basic authentication in lower environments, to token or MFA based in higher environments</p> </li> <li> <p>User information for authentication may vary. Users in lower environments may be exchanged by production-similiar users in higher environments.</p> </li> </ul>"},{"location":"conceptual-runenvironment/#run-environment-variables","title":"Run Environment Variables","text":"<p>Run environments can hold a list of variables with specific values for the run environment. You may want to use different request parameters for a developers' test environment than for a business test environment or staging environment.  Run environment variables are resolved for: - requests and  - urls The syntax to referencing them in your test definition is pretty simple: $(EnvironmentVariable.).  A Run environment variable name must be unique for a Run environment,the list editor will mark duplicate entries as duplicate key in the name column. <p></p> <p>There are two actions available:</p> <ul> <li>add a new Run Environment variable</li> <li>delete selected Run Environment variables for this Run Environment</li> </ul>"},{"location":"conceptual-runenvironment/#use-run-environments-for-your-teststeps","title":"Use Run Environments for your teststeps","text":"<p>Typically you start by importing or creating a service definition (WSDL, Manual HTTP Service). These service definition hold in general all information that are independent of Run Environments.</p> <ul> <li> <p>Create an Endpoint reference</p> </li> <li> <p>Create a Manual HTTP Service Definition</p> </li> </ul> <p>You might have a list of Service definition like in the screenshot below: </p> <p>You may need to handle several Run Environments like in the next screenshot:</p> <p>                 You would proceed in the following order:</p> <ul> <li> <p>You create Run Environment Service Definitions i.e. you define the environment specific properties for your Service Definitions</p> </li> <li> <p>You link your SOAP and HTTP-Teststeps to Service Definitions to use your Run Environment Service Definitions</p> </li> <li> <p>You pick a Run Environment or run a Test execution and run your tests</p> </li> </ul> <p>We will walk through each of these steps below:</p>"},{"location":"conceptual-runenvironment/#create-a-run-environment","title":"Create a Run environment","text":"<p>Switch to the view Environment  and click the Button New Environment</p> <p> </p> <p>This will open a sub dialog where you enter the name of the new Run Environment. Confirm with OK</p> <p></p> <p>You will see a new entry, which you select to configure the RunEnvironmentServiceDefinitions, if appropriate. You do this, if you want to switch easily between Run Environments and have predefinition URL and authentication settings. </p> <p>We configure the first Manual HTTP Webservice Definition as follows:</p> <p></p> <p>With this, we can proceed with the last two remain steps in the TestDefinition View:</p> <p>We create an HTTP Teststep and link it to the Manual HTTP Service Definition</p>"},{"location":"conceptual-runenvironment/#create-a-http-teststep-with-a-service-definition-reference","title":"Create a HTTP Teststep with a Service Definition Reference","text":"<p>We can use Run Environments for Teststeps that reference a Service Definition. For SOAP Teststeps this is a mandatory step during creation and mandatory for WSDL-based schema validation, for HTTP Teststeps this is an optional step and very helpful.</p> <p>We switch to the View Service Definition and create a HTTP Teststep that references the My HTTP Service  Service Definition.</p> <p></p> <p>We select the Run Environment Time Travel and open the configuration details for teststep, we are done now. Authentication and base host URL information are kept centrally and referenced only. </p> <p>We can focus on the teststep specific parameters like HTTP Method and a specific route under test, see more about Create an HTTP Teststep and Create a SOAP Teststep.</p>"},{"location":"gettingstarted/","title":"Installing APIJockey TEST and first steps","text":""},{"location":"gettingstarted/#download","title":"Download","text":"<p>Get it on the AppStore: </p>"},{"location":"gettingstarted/#installation-process","title":"Installation process","text":"<p>The installation from the Apple Appstore will work automatically. Once it is installed you'll find APIJockey Test under Applications </p> <p></p> <p>or in the Launchpad</p> <p></p>"},{"location":"gettingstarted/#first-start-of-apijockey-test","title":"First start of APIJockey TEST","text":"<p>When APIJockey TEST launches for the first time, you will be asked to read and accept the license agreement. If you choose to accept them, the main application window opens. A good place to start is the online help APIJockey Test Online help.</p> <p></p> <p>You need to check that you have read the license agreement and understood and accepted the license agreement before you use the software.</p>"},{"location":"gettingstarted/#where-to-start","title":"Where to start","text":"<p>Take a look at the Concents and Create your first tests</p>"},{"location":"gettingstarted/#apijockey-test-feature-list","title":"APIJockey Test feature list","text":"<p>This overview gives you an overview of the feature that are currently support. </p> Feature \u00a0Support in APIJockey TEST WSDL Service definition support Run Environment support Repository support Testset support Testcase support SOAP Teststep HTTP Teststep Datatransfer Teststep XPath Value Providers XQuery Value Providers Text Value Providers !        JSONPath Value Providers Randomize Teststeps Manual Randomized Valuelist Teststeps CSV file-based Randomized Valuelist Teststeps XPath assertions JSONPath assertions JSON assertions SOAP assertions HTTP assertions Databased Testcases Support for CSV file import in Databased Testcases Repository executions Display Repository execution results Testset executions Display Testset execution results Import and export Testcases, Testsets and Repositories"},{"location":"pasteboard/","title":"Pasteboard commands","text":"<p>These command buttons are used in almost all list view.</p> <p> </p> <ul> <li> <p>copy Copies your current selection to a common application pasteboard. This makes the selected elements available for paste operations on the same or any other parent element. With the paste operation, the selected elements are copied to the new parent and kept for the current parent element.- </p> </li> <li> <p>cut Copies your current selection to a common application pasteboard. This makes the selected elements available for paste operations on the same or any other parent element. With the paste operation, the selected elements are moved to the new parent element.</p> </li> <li> <p>paste  the elements to the new parent depending on the previous operation (cut,copy).</p> </li> <li> <p>duplicate copies and pastes the selected elements to the current list.</p> </li> </ul>"},{"location":"releasenotes/","title":"Release Notes","text":"<p>These release notes cover release information for APIJockey TEST, which is available in the Apple Store for MacOS and also available as a download on APIJockey.com</p>"},{"location":"releasenotes/#version-173-2025-05-09","title":"Version 1.7.3 (2025-05-09)","text":"<ul> <li> <p>Improved support for large files (2000+ lines)</p> </li> <li> <p>Context sensitive help and one-click searchable WSDL definitions for elements and types beyond simple text search    (Mouse drag with CMD-key pressed or Double click with CMD-key pressed)</p> </li> <li> <p>Multi window support (toolbar icon)</p> </li> <li> <p>Databased testcase tables and randomized valuelist tables support selections to limit the rows used for data retrieval</p> </li> </ul>"},{"location":"releasenotes/#version-171-2025-02-01","title":"Version 1.7.1 (2025-02-01)","text":"<p>This release includes several bugfixes</p> <ul> <li> <p>Randomize Teststeps with manual input tables displayed contents incorrect when first opened</p> </li> <li> <p>Randomize Valuelist Teststeps did not provide startRow and lastRow input text fields</p> </li> <li> <p>refactored RouteParameter lists and QueryParameter lists</p> </li> <li> <p>Map view resizing corrected for small window sizes </p> </li> </ul> <p>Javascript Value Provider</p> <p>Datatransfer Teststeps contain a new Javascript value provider to retrieve HTML page contents and store them in a variable. See Javascript Value Provider</p>"},{"location":"releasenotes/#version-170-2025-01-19","title":"Version 1.7.0 (2025-01-19)","text":"<p>Support for Sample messages</p> <p>The Service Definition section includes an new tab Samples. Samples are a new feature where you create messages for your operations (input, output or fault message) and use the input messages when you create a new SOAP Request. </p> <p>On creation of a new SOAP Teststep you will be prompted to use (optionally) an existing sample for the request. This helps you streamline request creation while organizing your samples without the workaround to copy and paste from existing teststeps. </p> <p>See more in Wsdl Service Definition Tab Samples</p> <p>Randomize location information</p> <p>See more  on Location Random Value Provider</p>"},{"location":"releasenotes/#version-164-2025-01-03","title":"Version 1.6.4 (2025-01-03)","text":"<p>Support for EnvironmentVariables</p> <p>An EnvironmentVariable stores a value for a RunEnvironment. You may want to store usernames in a run environment or use different static data in your request for different Run Environments. See more in EnvironmentVariables</p> <p>New teststep type HTMLTeststep</p> <p>an HTMLTeststep loads a website and displays the contents in a browser window. This is helpful, when you test web services postprocesing. You may visually check the website content or create a list of Javascript-based assertions on the webpage. See more in HTML Teststep View</p>"},{"location":"releasenotes/#version-163-2024-11-28","title":"Version 1.6.3 (2024-11-28)","text":"<p>New table component in various test steps, share and download easily test steps and test data</p>"},{"location":"releasenotes/#version-162-2024-04-12","title":"Version 1.6.2 (2024-04-12)","text":"<p>Bugfix in HTTPTeststep for variable urls</p>"},{"location":"releasenotes/#version-161-2024-04-05","title":"Version 1.6.1 (2024-04-05)","text":"<p>Bugfix on table views</p>"},{"location":"releasenotes/#version-160-2024-03-15","title":"Version 1.6.0 (2024-03-15)","text":"<p>This major update contains</p> <ul> <li>Display images and PDF-files in response view of HTTP teststeps</li> <li>AI-based Image assertions on text and barcodes within images in the HTTP Teststep assertion list </li> <li>PDF assertions to test for expected text (on pages or the whole document) and PDF document attributes</li> <li>A JSON Tree Editor for HTTP Teststep POST and PUT requests</li> <li>A JSON Tree Viewer for HTTP Teststep Response</li> <li>A new Variable selection dialog to use in the SOAP and JSON Request tree editor</li> <li>Databased Testcases support JSONPath, XQuery and XPath to create input data from Teststeps</li> <li>Bugfix on the structured URL request editor (HTTP Teststep) to resolve characters in URLs appropriately</li> <li>Reworked Testexecution views to display results of historical persisted test runs.</li> <li>Reworked Databased input and result teststep tabular data grid view for better performance on large data sets.</li> <li>The paying Backup and Share functionality is replaced by a personal cloud functionality, which is free of charges.</li> </ul>"},{"location":"releasenotes/#version-150-2024-01-20","title":"Version 1.5.0 (2024-01-20)","text":"<p>This major update contains</p> <ul> <li>We introduce a cloud-based - paying - solution to Backup and share your Repositories</li> <li> <p>We extended the WSDL import handler to support import of WSDL definitions within a WSDL. Example:</p> <p> </p> </li> <li> <p>XML tree editors allow you to select variables as element contents</p> </li> </ul>"},{"location":"releasenotes/#version-140-2023-11-18","title":"Version 1.4.0 (2023-11-18)","text":"<p>This major update contains</p> <ul> <li>A new support for import and export of Testcases, Testsets and Repositories</li> <li>A Transformation sample script to export SOAP tests from SoapUI and ReadyAPI</li> <li>Datatransfer Teststeps provide a new TextValueProvider</li> <li>The HTTP and SOAP Teststep authentication config view allows to set individual prefix names instead of the hardcoded token Bearer</li> </ul>"},{"location":"releasenotes/#version-132-2023-10-16","title":"Version 1.3.2 (2023-10-16)","text":"<ul> <li>Bugfix in HTTPRequestEditor and updating logic when selecting teststeps</li> </ul>"},{"location":"releasenotes/#version-131-2023-10-08","title":"Version 1.3.1 (2023-10-08)","text":"<ul> <li>HTTPTeststeps support XML  and XML/SOAP contents</li> <li>Support for SOAP 1.2 added</li> <li>Manual validation and pretty-print functionality for HTTPTeststeps and SOAPTeststeps (request and response) added</li> <li>Copy and paste error in text editor fixed</li> </ul>"},{"location":"releasenotes/#version-130-2023-08-18","title":"Version 1.3.0 (2023-08-18)","text":"<p>This major update contains</p> <ul> <li>Support for Run Environments in HTTP Teststeps, SOAP Teststeps and persisted Test executions</li> <li>Create a set of rows in a Manual RandomizedvaluelistTeststep View</li> <li>Improved handling of date representation in CSV files with preview in View RandomizedValuelistTeststep and when you Create DatabasedTestcase</li> </ul>"},{"location":"releasenotes/#version-123-2023-07-16","title":"Version 1.2.3 (2023-07-16)","text":"<ul> <li>A SOAP response view provides a XML tree view with xpath information that can be selected</li> <li>several minor bug fixes for the syntax highlighting text editor (JSON, SOAP, XPATH)</li> </ul>"},{"location":"releasenotes/#version-122-2023-07-04","title":"Version 1.2.2 (2023-07-04)","text":"<p>This update contains</p> <ul> <li>Import and export of variables, see Variables Commands</li> <li>Support for light/dark mode changes in the editor</li> <li>New JSONPath assertions for JSON dictionary arrays, see View JSONPath assertion editor</li> <li>Support for selections in readonly text view and pasteboard support</li> </ul>"},{"location":"releasenotes/#version-121-2023-06-15","title":"Version 1.2.1 (2023-06-15)","text":"<p>This update contains </p> <ul> <li>bugfixes for the HTTPTeststep Details view</li> <li>minor improvements for the HTTPTeststep Execution view</li> </ul>"},{"location":"releasenotes/#version-120-2023-06-17","title":"Version 1.2.0 (2023-06-17)","text":"<p>This major update contains</p> <ul> <li>Create data-based test cases from CSV files or based on manual tables.</li> <li>Store your test case results in external tables and review results  in any spreadsheet application</li> <li>Select your XML-elements from your SOAP-Response to get the underlying XPath</li> </ul>"},{"location":"releasenotes/#version-110-2023-03-11","title":"Version 1.1.0 (2023-03-11)","text":"<p>This major update contains</p> <ul> <li>Create a Randomized List Teststep with a Manual Table editor</li> <li>Create a Randomized List Teststep with CSV Import</li> </ul>"},{"location":"releasenotes/#version-104-2022-11-14","title":"Version 1.0.4 (2022-11-14)","text":"<ul> <li>Support for XQuery</li> <li>Support for HTTP Assertions</li> </ul>"},{"location":"releasenotes/#version-103-2022-10-09","title":"Version 1.0.3 (2022-10-09)","text":"<p>This update contains bugfixes</p>"},{"location":"releasenotes/#version-102-2022-09-19","title":"Version 1.0.2 (2022-09-19)","text":"<p>This update contains bugfixes</p>"},{"location":"releasenotes/#version-101-2022-09-12","title":"Version 1.0.1 (2022-09-12)","text":"<p>This update contains bugfixes</p> <ul> <li>SOAP Teststeps</li> <li>HTTP Teststep</li> <li>Randomize Value Teststep</li> <li>Datatransfer Teststep</li> <li>Test executions (Report View)</li> </ul>"},{"location":"releasenotes/#version-100-2022-09-06","title":"Version 1.0.0 (2022-09-06)","text":"<p>First Release</p> <ul> <li>Test hierarchies with Repositories/Testsets/Testcases and Teststeps</li> <li>Testexecutions for reporting in the Standard Edition</li> <li>SOAP Teststeps</li> <li>HTTP Teststep</li> <li>Variables</li> <li>Randomize Value Teststep</li> <li>Datatransfer Teststep</li> <li>Test executions (Report View)</li> <li>JSONPath support</li> <li>XPath support</li> </ul>"},{"location":"servicedefinitions/","title":"Servicedefinitions","text":"<p>the tab servicedefinitions holds information about  - WSDL service definitions and  - Manual servicedefinitions.</p>"},{"location":"servicedefinitions/#wsdl-service-definition","title":"WSDL Service Definition","text":"<p>A WSDL contains information about SOAP Web services. When you work with SOAP Web services you you will need to know which operations and messages are available and what authentication is required.</p> <p>As WSDL service definition includes information in three tabs - Textview contains the WSDL itself with its definitions of services, operations, messages, ports, bindings and schema type information - Types lists all namespace schema files with their contents that are referenced by the WSDL file according to import or include elements or separate XSD-files doing so. - Samples lists all messages and allows you to create and maintain sample requests or responses for use in requests or when mocking web service responses, which you may want to perform in a third party solution.</p> <p>While the Textview and the Types tab are self-explaining, the Samples tab offers functionality that help you create requests by holding a list of predefined messages.</p>"},{"location":"servicedefinitions/#wsdl-service-definition-tab-samples","title":"WSDL Service Definition Tab Samples","text":"<p>All WSDLs define services, ports, operations, messages and types. These define the data model of your requests and responses. </p> <p>Types may be defined in the WSDL-file itself or be referenced in separate schema files (XSD-files) that need to be taken into account when loading the WSDL itself, in general following an import or include element. You would find these XSD files in the Types tab.</p> <p>The tab holds a list of messages defined in the WSDL file. When you select a message, you can create samples with a sample title. Right to you list, you can edit your message. For requests this will be the corresponding request message. </p> <p>If you don't want to start from scratch create from WSDL definition will read the WSDL information and help you getting started.</p> <p>The Button validate will trigger assertion of the current sample content against the wsdl, in case errors these are displayed in the validation error list.</p> <p>When you create a SOAP request, you will be prompted for the SOAP Operation that you want to test. In case you have defined a Sample for the SOAP Operation Input message, these are listed side-by-side with the operation.  Selecting on would copy the sample content in the request. </p>"},{"location":"servicedefinitions/#manual-service-definition","title":"Manual Service Definition","text":"<p>When you want to work with HTTP Teststeps and configure different run environment servicedefinition information such as authentication and URLs you may create a manual service definition.</p> <p>This service definition can be referenced in the tab Run Environment.</p>"},{"location":"task-create-testdefinition/","title":"Create an Endpoint Service Definition","text":"<p>An Endpoint (reference) contains the webservice definition, technically. For A SOAP webservice this is the WSDL. </p>"},{"location":"task-create-testdefinition/#short-overview-of-the-task","title":"Short Overview of the task","text":"<ul> <li>Switch to the endpoint view</li> <li>Create an endpoint and enter the endpoint-wsdl URL</li> <li>Download the WSDL definition</li> <li>View the endpoint definition</li> <li>Next steps</li> </ul> <p>If you want to test a SOAP webservice, you need to import the WSDL. This has several reasons</p> <ul> <li>APIJockey TEST will read all types, operations, port types, messages and bindings provides these information in a searchable view.</li> <li>The creation of SOAP Teststep will require you to enter a specific operation. This is the base for the schema validation of your request.</li> </ul>"},{"location":"task-create-testdefinition/#create-an-endpoint-reference","title":"Create an Endpoint (reference)","text":"<p>Start APIJockey TEST in Launchpad  You will see the sidebar on the left. On the top just before the colored window handles, you will see the tab bar. When you start APIJockey TEST, the tab Test defintion is selected.</p> <p></p> <p>Switch to endpoint definition as shown here:</p> <p> </p> <p>This view will be empty when you haven't yet imported a WSDL definition. We will use an WSDL created by the w3c.org consortium which you can find here and load in your browser.</p> <p>http://schemas.xmlsoap.org/ws/2004/09/enumeration/enumeration.wsdl</p> <p>Let's drag the sidebar to the right, this will show the tabs Endpoint, Test Definition and Test Execution</p> <p></p> <p>Click the Button New Endpoint Reference</p> <p></p> <p>A new modal dialog comes up. Enter the following URL: http://schemas.xmlsoap.org/ws/2004/09/enumeration/enumeration.wsdl.  In general the WSDL is passed as an URL-Parameter, but we take the url as provided. Add the following data:  1 Enter the URL 2 Tab to next textfield to see a default endpoint name 3 Make sure the toggle start download after confirmation is enabled. 4  Confirm the dialog with OK.</p> <p></p> <p>The Application will download the WSDL data and display a new entry unter Endpoints with the endpoint name you entered. The first part is done.  When you select an endpoint and click the tab types you will see the list of XSD files that imported to or included in the WSDL. You can select each of them, read them and search within them</p> <p></p> <p>When you select an endpoint and click the tab Textview you will see original the WSDL. You can search here as well.</p> <p>Once you have an Endpoint (reference), you will be able to create a SOAP Teststep. You have the option to create SOAP and HTTP-Teststeps without endpoint references; These teststeps will not support WSDL schema definitions and Run Environment settings.</p> <p>See  Testdefinition and Run Environment</p>"},{"location":"task-create-testdefinition/#create-a-test-definition-hierarchy","title":"Create a Test definition hierarchy","text":"<p>When you work with a large number of webservices, with various releases, you will find it necessary to organize your tests in a structured, hierarchical way.</p> <p>API-Jockey organizes tests in a hierarchy of  - Repository lists - Testset lists - Testcase lists and  - Teststep lists.</p> <p>Here, we will walk through the creation of such a Test definition hierarchy to get you started.</p> <ul> <li>A Repository, see </li> <li>A Testset</li> <li>A Testcase</li> </ul> <p>These tree elements are mandatory for creating teststeps. APIJockey TEST provides several types of Teststeps. See more in View Teststep list</p>"},{"location":"task-create-testdefinition/#create-a-repository","title":"Create a Repository","text":"<p>When you launch APIJockey TEST you will see a number of views. We will walk through some of these views in this tutorial. </p> <p></p> <p>Click on the button Create new Repository to create a new Repository. This will open a dialog where you must enter the name of the new Repository. We enter the name Enumerations</p> <p></p> <p>Enter a unique name for the Test Repository. We'll call it Enumerations.Confirm with OK. You can rename the repository at any later point in time. You will get the following view: </p> <p></p> <p>As you can see the toggle Edit repositories has become available, since there is a repository selected. You use this option, when you need to work on your Repository list. Untoggle the option Edit repositories**, this will disclose the repository list. You can switch between the repository be selection one of them from dropdown list:</p> <p></p>"},{"location":"task-create-testdefinition/#create-testset","title":"Create Testset","text":"<p>You are ready to create your first Testset. click with your mouse on the Button new Testset.</p> <p></p> <p>This opens a new dialog, enter folder as the testset name. Select the new testset and make sure, the Testcase/Teststep list is visible. The testcase view shows the testcases associated with the currently selected testset, which is an empty list for now.</p> <p></p>"},{"location":"task-create-testdefinition/#create-testcase","title":"Create Testcase","text":"<p>To create a new Testcase click the + (new Testcase)</p> <p></p> <p>Drag the lower right edge of the dialog more to the right to get more space for the name. Enter the name Sample Testcase.Confirm with OK.</p> <p></p> <p>Now, you have a completed Testdefinition hierarchy and can start creating teststeps. You may continue reading with:</p> <ul> <li>Create a Databased testcase</li> <li>Create an HTTP Teststep</li> <li>Create a SOAP Teststep</li> <li>Create a Randomize Teststep</li> <li>Create a Tabulardata Valuelist Teststep</li> <li>Create a Manual Valuelist Teststep</li> <li>View Datatransfer Teststep</li> </ul>"},{"location":"task-create-testdefinition/#create-an-http-teststep","title":"Create an HTTP Teststep","text":"<p>A HTTP teststep performs URL requests for various HTTP methods with or without body JSON data.</p>"},{"location":"task-create-testdefinition/#prerequisites-to-create-an-http-teststep","title":"Prerequisites to create an HTTP Teststep","text":"<ul> <li>Create a Repository</li> <li>Create a Testset </li> <li>Create a Testcase</li> <li>You have selected a testcase</li> </ul>"},{"location":"task-create-testdefinition/#steps-to-create-an-http-teststep","title":"Steps to create an HTTP Teststep","text":"<p>The globe icon-ed button creates a new HTTP Teststep.</p> <p>This opens a dialog, which asks you to enter a name for the new teststep. Click cancel, if you changed your mind and don't want to create a HTTP teststep any more.</p> <p></p> <p>When you confirm with OK, the teststep will be created and is visible in the teststep list.</p> <p></p> <p>See details to configure and run your HTTP Teststep in HTTP Teststep View Learn about using Run Environments in Run Environments</p>"},{"location":"task-create-testdefinition/#create-a-soap-teststep","title":"Create a SOAP Teststep","text":"<p>A SOAP teststep performs sends a SOAP/XML payload (Request) to a specified URL and waits for the SOAP/XML response payload</p>"},{"location":"task-create-testdefinition/#prerequisites-to-create-a-soap-teststep","title":"Prerequisites to create a SOAP Teststep","text":"<ul> <li>Create a Repository</li> <li>Create a Testset </li> <li>Create a Testcase</li> <li>You have selected a testcase</li> </ul> <p>Select the new test case. Then move the mouse down to the teststeps list . Click the Button Create new SOAP Teststep</p> <p></p> <ul> <li>Enter a unique teststep name EnumerateOp</li> <li>disclose the soap endpoint operation list for enumeration.wsdl</li> <li>Select EnumerateOp from the list.</li> <li>Confirm the dialog with OK</li> </ul> <p></p> <p>APIJockey TEST has created a starter request for you.Next, move the separator line between request window and Test list window to the left as much as possible (1) and (2) drag the separator line between request and response fully to the right.</p> <p></p> <p>Now, it may make sense to further increase the request window size. Go the Menu Viewand toogle Hide Sidebar. This makes the sidebar invisible.</p> <p> Congratulations, you have your first request. In real life, you would have to </p> <ul> <li>provide a Service Url in (1)</li> <li>set authentication data or remove basic authentication.</li> <li>Verify the Test step config settings in (3)</li> <li>Run the SOAP Request</li> <li>Review errors in (5)</li> </ul> <p></p> <p>Learn about using Run Environments in Run Environments</p>"},{"location":"task-create-valuelist-teststeps/","title":"Random test data support Overview","text":"<p>APIJockey TEST supports several options to provide random  data in our tests:</p> <ul> <li>You enter your random data  in a table editor where the data is stored inside your test definitions and APIJockey TEST will read a random row during the test run.</li> <li>You provide random value provider configuration i.e. you define simple rules inside a teststep that allows for random data generation</li> <li>You provide a CSV file where a random row will  be used during test run.</li> </ul>"},{"location":"task-create-valuelist-teststeps/#create-a-manual-randomizedvaluelist-teststep","title":"Create a Manual RandomizedValuelist Teststep","text":"<p>Creates an empty table of rows and columns and randomizes data in this table to provide variables values. You may edit rows and columns and apply formatting.</p>"},{"location":"task-create-valuelist-teststeps/#steps-to-create-a-manual-randomizedvaluelist-teststep","title":"Steps to create a manual RandomizedValuelist Teststep","text":"<p>Select the button create new RandomizedValuelist teststep with manual data entry</p> <p> </p> <p>This opens a dialog that allows you to enter the name of the teststep. You can choose to enter this name at any point later in time.</p> <p> </p> <p>When you confirm with OK the dialog disappears and creates a new entry in the teststep list. Cancel dismisses without creating the teststep.</p> <p>When you select the new teststep, the Manual RandomizedValuelist Teststep editor opens. See details to edit the randomized list value in Manual Randomizedvaluelist Teststep View</p> <p>If you have a CSV file that you want to import, you may want to Create a RandomizedValuelist Teststep</p>"},{"location":"task-create-valuelist-teststeps/#create-a-randomize-teststep-with-a-random-value-provider","title":"Create a Randomize Teststep with a Random Value Provider","text":"<p>This walkthrough shows you, how to create a Randomizeteststep and define a Randomvalueprovider that provides random, in this case a simplified Vehicle Identification Number (VIN)</p>"},{"location":"task-create-valuelist-teststeps/#step-1-create-a-randomizeteststep","title":"Step 1: Create a RandomizeTeststep","text":"<p>Select the button create new RandomizedValuelist teststep with manual data entry</p> <p> </p> <p>This opens a dialog that allows you to enter the name of the teststep. You can choose to enter this name at any point later in time.</p> <p> </p> <p>When you confirm with OK the dialog disappears and creates a new entry in the teststep list. Cancel dismisses without creating the teststep.</p> <p>When you select the new test step, the RandomizeTeststep editor opens. See details to edit the randomized list value in RandomizeTeststep View The RandamizeTeststep displays an empty list of RandomValueProviders and, if selected the editor to configure the random value provider.</p> <p> </p>"},{"location":"task-create-valuelist-teststeps/#step-2-create-a-randomvalueprovider-for-a-simplified-vin","title":"Step 2: Create a RandomValueProvider for a simplified VIN","text":"<p>We want to create ONE RandomValueProvider in this RandomizeTeststep that provides random VINs The VIN:</p> <ul> <li>starts with WDB</li> <li>contains 14 subsequent alphanumerical characters</li> </ul> <p>We want to store this random VIN in a testcase variable vin, which we need to create.</p> <p>Click with your mouse on the button create new random value and enter the name VIN (Vehicle Identification number). We will create a simplified VIN-generator that is sufficient for our purposes. Select the string random value provider - entry VIN. This opens the StringRandomvalueProvider editor.</p> <p> </p> <p>Click with your mouse on the button create new String random value (#text). This opens a dialog for the element to be created.</p> <p> </p> <p>Insert the name WDB and confirm with OK. This will insert a new expression value, which we need to select to edit it.</p> <p> </p> <p>When you select your WDB expression, you will see an editor on the right side, with some defaults. We keep them for the moment. Click with your mouse on the button Test your randomValue to see the outcome. The random value is displayed besides the text current random value preview:. this is not yet want we wanted. We set the value expression type to fixed and set the included characters to WDB. and test again our randomValue.</p> <p> </p> <p>Click again with your mouse on the button #text. This opens a dialog for the element to be created. Enter the name VINtail and confirm with OK. This will insert a new element, which we need to select to edit it. Edit the  value expression as follows</p> <ul> <li>included values ABCDEFGHIJKLMNOP123456789</li> <li>number of random characters 14</li> <li>make sure the VINtail comes after the WDB. You may use move up or move down.</li> <li>Click with your mouse on the button Test your randomValue to see the outcome. The random value is displayed besides the text current random value preview:.</li> </ul> <p>This would give following result:  </p>"},{"location":"task-create-valuelist-teststeps/#step-3-reference-a-testcase-variable","title":"Step 3: Reference a testcase variable","text":"<p>The command Test your random value lets you verify, if the definition works as desired. To use this definition. you must link a variable to the RandomValueProvider. This is done with the VariableValueTransfer view. Let's create this here.</p> <p> </p> <p>We add a new variable with name VIN on the testcase and connect it to our RandomValueProvider.</p> <p>Click with your mouse on Add Variable. A dialog opens where you can edit the name and (optionally) the value. We'll keep the value at it is. Enter the name VIN</p> <p></p> <p>You will see the new variable.   </p> <p>Double click the variable to get the variable connected to your RandomValueProvider</p> <p> </p> <p>When you click Run teststep now, you will see synchronized value for:</p> <ul> <li>RandomValueProvider preview</li> <li>the expression list preview</li> <li>the connected variable value.</li> </ul> <p>If you want, you can verify the variable value itself in the sidebar navigation, which we may need to make visible first, depending on the current state, you may toggle to show the sidebar here:</p> <p> </p> <p>When the sidebar is visible, you will see the variables list, and in this, you'll find your connected and updated variable.</p> <p> </p>"},{"location":"task-create-valuelist-teststeps/#create-a-randomizedvaluelist-teststep","title":"Create a RandomizedValuelist Teststep","text":"<p>Takes a CSV file as input and randomizes data in this file to provide variables values.</p>"},{"location":"task-create-valuelist-teststeps/#steps-to-create-a-randomizedvaluelist-teststep","title":"Steps to create a RandomizedValuelist Teststep","text":"<p>The RandomizedValuelist Teststep expects a CSV file as input. You will find a sample walkthrough in Steps to create a CSV file with Apple\u00ae Numbers </p> <p>Select the button create new RandomizedValuelist Teststep</p> <p> </p> <p>This opens a dialog that allows you to enter the name of the teststep. You can choose to enter this name at any point later in time.</p> <p> </p> <p>When you confirm with OK the dialog disappears and creates a new entry in the teststep list. When you select the new teststep, the RandomizedValuelist Teststep editor opens. See details to configure the randomized list value in Randomizedvaluelist Teststep View</p> <p>If you have a CSV file that you want to import, you may want to [Create a manual RandomizedValuelist Teststep]</p>"},{"location":"task-create-valuelist-teststeps/#steps-to-create-a-csv-file-with-apple-numbers","title":"Steps to create a CSV file with Apple Numbers","text":"<p>This short tutorial demonstrates a very basic CSV file that serves as input. It provides a small set of contact information. We assume we have a limited set of data and would like to create randomized combination of the data. e.g. Column 1 - Row 1  with Column 2 Row 7....</p> <p> </p> <p>We created our limited test data in Apple\u00ae Numbers,but it does not really matter, what source the CSV is created from. We cover Apple\u00ae Numbers here to show how this can done. </p>"},{"location":"task-create-valuelist-teststeps/#export-the-table","title":"Export the table","text":"<ul> <li>Select the menu File</li> <li>Select the menu item Export To</li> <li>Select the sub menu item CSV...</li> </ul> <p>This opens a two steps wizard that allows you to customize export settings.</p> <ul> <li>Choose CSV</li> <li>Keep include table names unchecked</li> <li>Under Advanced Options make sure, Unicode (UTF-8) is selected</li> <li>Click Next...</li> </ul> <p> </p> <p>Select your favorite destination folder. In the screenshot, this is the personal download folder.</p> <p> </p> <p>When you open Finder you will find the CSV file in the folder downloads.</p>"},{"location":"task-createdatabasedtestcase/","title":"Create a Databased Testcase","text":"<p>This walkthrough shows you, how to create a Databased Testcase with a manual input table. You will perform the following steps:</p> <ul> <li>use and edit manual input table</li> <li>create a simple REST-Service call</li> <li>create variable transfers for the result teststep</li> <li>download the result table</li> </ul>"},{"location":"task-createdatabasedtestcase/#create-the-test-definition-hierarchy","title":"Create the Test Definition Hierarchy","text":"<ul> <li>Create a Repository</li> <li>Create a Testset</li> <li>You have selected a testset</li> </ul>"},{"location":"task-createdatabasedtestcase/#step-1-create-a-databased-testcase","title":"Step 1: Create a Databased Testcase","text":"<p>Select the button create new Databased Testcase</p> <p>This opens a dialog that allows you to enter the name of the teststep. You can choose to enter this name at any point later in time.</p> <p>(storage/DialogNewDatabasedTestcase.</p> <p>When you confirm with OK the dialog disappears and creates a new entry in the testcase list. Cancel dismisses without creating the testcase.</p> <p>When you select the new testcase, you will see two teststeps that were created automatically for you</p> <p>(storage/DatabasedTestcaseAftercreation.)/&gt;</p> <ul> <li>The Data Loop Input Teststep that you will use later to enter data.</li> <li>The Data Loop Result Teststep that you will use later to set result values.</li> </ul>"},{"location":"task-createdatabasedtestcase/#step-2-create-a-http-teststep","title":"Step 2: Create a HTTP Teststep","text":"<p>We will create a new HTTP Teststep</p> <p> </p> <p>Click on the button Create new HTTP teststep. This will open a dialog where you enter the name Search iTunes and confirm with OK</p> <p></p> <p>This has created a new HTTP Teststep that will appear at the top of the list.. We will configure this teststep further down in the tutorial.</p> <p>The Databased Testcase runs all teststeps between the input teststep and output testsep in a loop that is determined by the  number of elements in the Input Teststep and limited to the position of the Result Teststep where you may document the results in an exportable table.</p> <p>This means, we want the new Teststep to be between the Input Teststep and the Result Teststep. The following screenshot shows how you can rearrange selected teststeps with the arrow buttons to move the Search iTunes HTTP Teststep between Input Testsstep and Result Teststep</p> <p></p> <p>We will use the real-life iTunes Search API.</p> <p>The documentation of this API is provided here on iTunes Search API Documentation Archive</p> <p>Please don't understand these screenshots as any kind of endorsement from Apple\u00ae for this software.</p> <p>You may use the following request in an application that wants to retrieve a list of apps. We will use one sample request from the iTuneSearchAPI documentation, and include a limit of five results: To search for applications titled \u201cYelp\u201d and return only the results from th e United States iTunes Store, use the following URL: </p> <p>https://itunes.apple.com/search?term=yelp&amp;country=us&amp;entity=software&amp;limit=5</p> <p>When you use the same request with the same parameters, you may more easily follow the instructions and assertion results used in this tutorial. So even if your favorite app isn't the one mentioned above it's worth using it for this tutorial.</p>"},{"location":"task-createdatabasedtestcase/#step-3-edit-the-data-loop-input-teststep","title":"Step 3: Edit the Data Loop Input Teststep","text":"<p>We want to demonstrate the Databased Testcase by providing variations of:</p> <ul> <li>Limit 1, 2, 3 (As the intention of the Search API is not to help out with our tutorial, we want to limit the search results)</li> <li>Country (US, Canada)</li> <li>Software (Yelp, Apple)</li> </ul> <p>These variations are sufficient to demonstrate how the Databased Testcase works.</p>"},{"location":"task-createdatabasedtestcase/#step-4-enter-the-input-teststep-data-with-a-manal-list","title":"Step 4: Enter the Input teststep data with a manal list","text":"<p>The APIJockey TEST Community Edition allows you to enter test data in an internal table editor. The Apple Appstore Edition allows you the import a CSV-file. As we have few elements only, we will use the manual table editor. Select the Teststep Data Loop Input Teststep and make sure your App shows the same view as in the screenshot below:</p> <p> </p> <p>We need to see:</p> <ul> <li>The variables of the testcase</li> <li>The selected Databased Testcase</li> <li>The selected Data Loop Input Teststep</li> <li>The (empty) columns of the inline table</li> <li>The (empty) rows of the inline table</li> </ul> <p>We will create a table with the following columns, according to the variations for the URL that we want to demonstrate:</p> <ul> <li>Limit</li> <li>Country</li> <li>Software</li> </ul> <p>The Data Loop Input Teststep we automatically create Variables for us that we can use in the parameter list of our URL To create a column, click the button Add new Column</p> <p></p> <p>This will open a dialog where you enter the name of the column ( = variable name ) and confirm with OK.</p> <p>We will create to other columns with the name Country and Software and select the column Software. We should have the following contents:</p> <ul> <li>We have three columns (Limit, Country, Software)</li> <li>We have three variables on the testcase (Limit, Country, Software), the variable link is editable, but we are happy with the default.</li> <li>We have not yet any contents for the variables, which we will do next:</li> </ul> <p> </p> <p>We will create the following new table contents:</p> Limit Country Softwre 1 US Apple 2 CA Apple 3 US Yelp <p>After entering the table, select the second row und click the Run Button. this will give the following results: ![Screenshot Databased Testcase DataLoopInputteststep after rows added and run.png)(storage/DatabasedTestcaseDataLoopInputteststepAfterRowsAddedAndRun.png)</p> <p>With this configuration in place, you can easily create new rows, which is not required for the tutorial. Select a specific row if you want to test manually a specific row.</p>"},{"location":"task-createdatabasedtestcase/#step-5-edit-the-url-and-run-the-search-itunes-http-teststep","title":"Step 5: Edit the URL and run the Search iTunes HTTP Teststep","text":"<p>We select the teststep Search iTunes and copy the URL in the URL textfield https://itunes.apple.com/search?term=yelp&amp;country=us&amp;entity=software&amp;limit=5 We can disclose the Sidebar and the Test definition list (Testcase, Teststep) and focus on our current teststep, for now. We run the teststep and will get a JSON Response as in this sceenshot: (storage/DatabasedTestcaseHTTPTeststepWithfixedURL.) ![Databased Testcase HTTPTeststep with fixed URL] Now, we will replace the fixed parameter with variable placeholders:</p> <ul> <li>old: https://itunes.apple.com/search?term=yelp&amp;country=us&amp;entity=software&amp;limit=5</li> <li>new: https://itunes.apple.com/search?term=$(Testcase.Software)&amp;country=$(Testcase.Country)&amp;entity=software&amp;limit=$(Testcase.Limit)</li> </ul> <p>We will see this outcome: </p> <p>This works, but the URL is hard to edit, you may switch to a different URL edit, like URL with separate list of query parameters</p> <p>![Databased Testcase HTTPTeststep with variable URL query parameter list.png)(storage/DatabasedTestcaseHTTPTeststepWithVariableURLQueryParameterList.png)</p>"},{"location":"task-createdatabasedtestcase/#step-6-edit-and-run-the-dataloop-result-teststep","title":"Step 6: Edit and run the DataLoop Result Teststep","text":"<p>We want to store some information from the HTTP request to a result teststep to assess the loop results in table later. This may be any spreadsheet application, such as Numbers or Excel. The approach is, you can use any variable value on the Teststep, Testcase, Testset or Repository and each loop will result in a new row in the result table. This result table can be exported to CSV and thus be imported to large set of external applications. For this tutorial, we would like to store:</p> <ul> <li>Limit</li> <li>Country</li> <li>Software</li> </ul> <p>Use may use a Datatransfer Teststep to include further data and access them via their link variables.</p> <p>We select the DataLoop ResultTeststep as shown below:  </p> <p>We create the first new column Limit.Click on the button New Column.</p> <p></p> <p>This will open a dialog where you can enter the name Limit and confirm with OK.</p> <p></p> <p>Select the column, you will see a view where you can link any variable within the current test definition hierarchy (teststep, testcase, testset, repository) to the new column.</p> <p></p> <p>Click on the variable Limit to link this testcase variable to the selected column.This will show the linked variable.</p> <p>!(storage/DatabasedTestcaseDataLoopResulTeststepColumnLimitOnly.png)</p> <p>We create two more columns and link them with the existing testcase variables that share their name. This will result in the following column-variable-data, assuming, you had selected the second row in the DataLoopInputTeststep and you pressed the Run button.</p> Limit Country Software 1 US Apple 2 CA Apple 3 US Yelp"},{"location":"task-createdatabasedtestcase/#run-the-databased-testcase-and-the-dataloopresultteststep","title":"Run the Databased Testcase and the DataLoopResultTeststep","text":"<p>When we run this teststep with the Run button, the current set of columns will be added with their linked variable values to the result table. The toggle Append to end of table is set to true. Press (optionally the delete button to remove the result row from the teststep run. We won't do it here.</p> <p></p> <p>Finally, we will run the DatabasedTestcase itself in the Testcase List View and see how this testcase iterates of the rows of the DataLoopInputTeststep.Make sure, the toggle Append to end of tableis set to true in the result table.</p> <p></p> <p>After we click the Run button on the testcase list view with the Databased Testcase selected, we see that the test run iterates of the rows in the input table. Finally, we have three more rows in the result table.</p> <p> </p> <p>We hope this tutorial was helpful and you enjoy using APIJockey TEST.</p>"},{"location":"teststepconfigviews/","title":"Application Overview","text":"<p>When you open APIJockey TEST you will see this layout: </p> <p></p>"},{"location":"teststepconfigviews/#view-variables","title":"View Variables","text":"<p>The Variables view consists actually of four views that allow to manage variables on different test definition elements.</p> <ul> <li>Repository</li> <li>Testset</li> <li>Testcase</li> <li>Teststep</li> </ul> <p>The status of the variables views and their visibility depends - of course - of your current selection.</p>"},{"location":"teststepconfigviews/#base-variable-view","title":"Base Variable View","text":"<p>The Variable views have all the same structure they just differ in the variable type and their parent type.</p> <p> </p> <p>The Variables parent selector tabs depend on your current selection. In the above screenshot, there are four tabs visible (repository, testset, testcase and teststep). You can deselect a repostory without losing the selection of the underlying testset. The name below the variables parent selector tabs is the name of parent element you have selected with your tabs, in this case the teststep Enumerate, as you can see on the right.</p>"},{"location":"teststepconfigviews/#commands","title":"Commands","text":"<ul> <li>Show/hide variables toggles the variables list. This may be helpful to have more space when editing testsets and repositories </li> <li>Export all variables will prompt for a directory and creates a properties file (key/value, separated by =) for all visible variable parents</li> <li>Import variables will prompt for a properties file (see above) contents and read the values as String variables</li> <li>Export variables will prompt for file name and location and creates a properties file (see above)</li> <li>Create new variable opens the variables editor as described above</li> <li>Delete selected variables deletes these variables. </li> <li>Edit a selected variable allows you to change the variable type, the name and the value </li> <li>Documentation of the Pasteboard commands</li> </ul>"},{"location":"teststepconfigviews/#variables-editor","title":"Variables editor","text":"<p>As described in Concepts, variables represent various value types and can be formatted in many ways. This paragraph walks through the variable editor options</p>"},{"location":"teststepconfigviews/#variable-types","title":"Variable types","text":""},{"location":"teststepconfigviews/#string-variables","title":"String Variables","text":"<p>Enter arbitrary-length Text. No formatting occurs.</p> <p> </p>"},{"location":"teststepconfigviews/#password-variables-editor","title":"Password Variables Editor","text":"<p>Enter arbitrary-length Text. No formatting occurs. The variable list will not show the variable value. The varaible value will not be shown with the toggle on off</p> <p>(storage/Variables-Editor-passwordvalue-undisclosed.png) ![Variables editor password value undisclosed] To see the actual password value, set the toggle to on (storage/Variables-Editor-passwordvalue-disclosed.png) ![Variables editor password value disclosed]</p>"},{"location":"teststepconfigviews/#fixed-date-variables-editor","title":"Fixed Date Variables Editor","text":"<p>The fixed/static date variables editor uses the builtin date picker to select a date and a time. The editor defaults the formatting to yyyy-mm-dd, but you can apply any supported formatting like yyyy-mm-dd'T'HH:mm:ss</p> <p> </p>"},{"location":"teststepconfigviews/#relative-date-variables-editor","title":"Relative Date Variables Editor","text":"<p>The relative date variables editor uses the builtin date/time picker to select a date, and if required a time. The editor defaults the formatting to yyyy-mm-dd, but you can apply any supported formatting like yyyy-mm-dd'T'HH:mm:ss. The reevaluation occurs whenever the variables value is accessed, so even in the variables list, this value is reevaluted when the list view updates.</p> <p> </p>"},{"location":"teststepconfigviews/#number-variables-editor","title":"Number Variables Editor","text":"<p>Number formatting is another frequent requirement as SOAP Webservices expect an identifiable number formatting and schema are pretty strict with the provided formatting. In general they expect simple numbers though.</p> <p> </p>"},{"location":"teststepconfigviews/#boolean-variables-editor","title":"Boolean Variables Editor","text":"<p>The Editor supports two options</p> <ul> <li>true/false</li> <li>yes/no</li> </ul> <p> </p>"},{"location":"teststepconfigviews/#run-environment-variables","title":"Run environment Variables","text":"<p>As described in [View Run Environment]{#viewrunenvironment} you can configure authentication for a Webservice in a Run Environment Configuration. Data that is configured here, will be accessed, when the user selects the corresponding Run Environment. When you want to access these information within your request, you can provide these values through Run Environment Variables, as described here:</p> Authentication type Textfield name Variable notation in Test definition HTTP basic Authentication HTTP username $(EnvironmentConfig.httpUsername) HTTP basic Authentication HTTP password $(EnvironmentConfig.httpPassword) HTTP bearer Authentication HTTP bearer token $(EnvironmentConfig.bearerToken) None (No HTTP authentication) Payload username $(EnvironmentConfig.payloadUsername) None (No HTTP authentication) Payload username $(EnvironmentConfig.payloadPassword) None (No HTTP authentication) Payload OTP $(EnvironmentConfig.payloadOTP) None (No HTTP authentication) Payload Token $(EnvironmentConfig.payloadToken) <p>We want to illustrate this specific variable resolution mechanism with the example of a sample request that needs to provide a username, a password, an OTP (fixed) in the Test Run Environment and a Token variable, that is retrieved from another request ) We configure a Service Definition for the local Run Environment with NONE-Authentication which means we will use an Idenity Service and pass over data. </p> <p> </p> <p>The relevant input is highlighted in blue, you will notice the variable value for the payloadToken information. We will pass the four information in an HTTP request (which could be a SOAP request as well. We have set the Run Environment to localhost. Notice the Repository variable with name token.Our request looks like this:</p> <p> </p> <p>Now, we switch to the tab resolvedRequest to see what the variables are resolve to:</p> <p> </p>"},{"location":"teststepconfigviews/#variablevaluetransfer","title":"VariableValueTransfer","text":"<p>A VariableValueTransfer designates a value (random value, manual or CSV-file input XPATH-expression JSONPath-expression) to a variable. It also server to write Variable values to a result table. When you want to use dynamic data in your requests, you will always access variable. The origin of the variable data is abstracted in the access and the VariablesValueTransfer describes this data transfer.</p> <p></p>"},{"location":"teststepconfigviews/#configure-a-variablevaluetransfer","title":"Configure a VariableValueTransfer","text":"<p>When you work with any of these teststeps, you will have to handle the included VariableValueTransfer:</p> <ul> <li>View RandomizeTeststep</li> <li>View RandomizedvaluelistTeststep</li> <li>View Manual RandomizedvaluelistTeststep</li> <li>View DatatransferTeststep</li> <li>Conceptual overview of Databased Testcases</li> </ul> <p>A variable can be referenced, if it is defined within the teststeps' Test definition Hierarchy</p> <ul> <li>on the teststep</li> <li>on the teststep's parent testcase</li> <li>on the teststeps's parent testset</li> <li>on the teststeps's parent repository</li> </ul> <p>When you create a new value provider, the variable's parent type is defaulted to testcase.</p> <p></p> <p>If you want to change this, click with your mouse on the button remove configuration. We will keep the setting as defaulted. Click with your mouse on the button Add Variable. This will open a dialog. Enter the name vin and keep the value as it is. If you switch the tab to something else than String (variable type), this entry will not be visible.  Cconfirm with OK  You will see a new entry.</p> <p> </p> <p>Click with your mouse on this list entry. Now, the variable is reference, you shoud see the following view. The random value provider is fully configured. You can run your value provider, now. </p> <p>Click with your mouse the on the button test run value provider. the updated value appears in the reference the reference variable view </p> <p> </p> <p>The random value in the screenshot will probably be different from the one you see.. You can reference your variable in the requesteditor as:</p> <p>$(Testcase.vin)</p> <p></p>"},{"location":"teststepconfigviews/#view-run-environment","title":"View Run Environment","text":"<p>this view can be found in the Viewgroup Environment The conceptual overview of working with different environments can be found in Run Environment Find a detailed description of the Run Environment View here</p>"},{"location":"teststepconfigviews/#list-of-run-environments","title":"List of Run Environments","text":"<ul> <li>list of environments displays all environments. Environments allow a service related configuration for URLs and authentication information</li> <li>new Environment creates a new entry</li> <li>delete removes an environment</li> <li>rename lets you change the list display name, which also affects the Run Environment picker text in the Viewgroup Testdefinition</li> <li>move up the position of the selected entries</li> <li>move down the position of the selected entries</li> <li>copy an existing entry to create a new entry</li> </ul>"},{"location":"teststepconfigviews/#run-environment-configurations-for-a-service-definition","title":"Run Environment configurations for a Service Definition","text":"<p>When you select en entry you can configure Run Environment specific settings, either empty</p> <p>![screenshot Run Environment with empty Service Configuration] (storage/RunEnvironmentEmptyConfiguration.png) </p> <ul> <li>Add will create a new configuration for the </li> <li>selected Run Environment time travel</li> <li>on the Service Definition My HTTP Service two</li> </ul> <p>When you click Add you will see a configuration dialog, outlined with screenshot for an existing configuration on another Service Definition: </p> <p>(storage/RunEnvironmentServiceDefinition.png) ![screenshot Run Environment Service Definition]</p> <p>This is a screenshot from a Manual HTTP Service Definition Run Environment configuration for an environment time travel. The SOAP definition differs only in the URL input, which is described below.</p>"},{"location":"teststepconfigviews/#settings-for-run-environment-service-definitions","title":"Settings for Run Environment Service Definitions","text":"<ul> <li>On the top, you see the currently seelcted run environment name</li> <li>You enter the host url and the port for a Manual HTTP Service Definition or a complete URL for SOAP Service. We expect non-SOAP Service to use routes and query parameters added to the host url that will not differ between environments but teststep specific, where soap service have just different URLs without route and query parameters</li> <li> <p>Authentication has three options:</p> </li> <li> <p>Basic HTTP Authentication, you provide a username and a password which will be used to create the HTTP Header Authorization Basic. See the example configuration in the screenshot above</p> </li> <li>Bearer HTTP Authentication, you provide a token information which will be used to create a HTTP Header Authorization Bearer</li> <li>NO HTTP Authentication, you may provide a payload username a payload password, a payload OTP **  and/or a payload token** that may be static or be variable</li> </ul>"},{"location":"teststepconfigviews/#resolution-process-for-run-environment-settings","title":"Resolution process for Run Environment settings","text":"<p>See Run Environment for the conceptual overview. In the case of basic and bearer authentication, APIJockey Test handles adding the Headers for you. It will resolve the information entered in this configuration screenshot.  You can access the authentication information in your payload by using variables, in the case you need to authentication against an Identity Service to get authorized for a business service You can use variables in the configuration, if you need to run an authentication call and want to store a token in a repository variable.  For convenience, find all EnvironmentConfig Variables here with the notation to use in your Test Definition</p> Authentication type \u00a0Textfield name \u00a0Variable notation in Test definition HTTP basic Authentication HTTP username $(EnvironmentConfig.httpUsername) HTTP basic Authentication HTTP password $(EnvironmentConfig.httpPassword) HTTP bearer Authentication HTTP bearer token $(EnvironmentConfig.bearerToken) None (No HTTP authentication) Payload username $(EnvironmentConfig.payloadUsername) None (No HTTP authentication) Payload username $(EnvironmentConfig.payloadPassword) None (No HTTP authentication) Payload OTP $(EnvironmentConfig.payloadOTP) None (No HTTP authentication) Payload Token $(EnvironmentConfig.payloadToken)"},{"location":"teststepconfigviews/#soap-attachments","title":"SOAP Attachments","text":"<p>The SOAP Request editor provides a tab Attachments to edit, update and delete attachments</p> <p> </p>"},{"location":"teststepconfigviews/#command-overview","title":"Command overview","text":"<ul> <li>Create new attachment adds a new enty in the attachments list. You need to load the actual content later, as in the screenshot.</li> <li>Delete removes the selected attachments from the attachments list. The local file disc content is not removed.</li> <li>Rename lets you change the name of the selected attachment. The attachment name is not used in the request and helps you organize your attachment list.</li> <li>Move Up changes the order of the selected attachment entries. This has not impact on the request</li> <li>Move Down changes the order of the selected attachment entries. This has not impact on the request</li> <li>Load from disc opens a file open dialog where you can select the file to attach. Select and confirm will load the file contents and insert them to the attachment entry, It will try to recognizes the appropriate MIME type.</li> <li>Edit MIME type lets you set your own MIME type that is uses in the request</li> </ul>"},{"location":"teststepconfigviews/#create-a-new-attachment","title":"Create a new attachment","text":"<p>Click with your mouse on the button Create new attachment. This will open a new dialog.</p> <p>![Dialog new SOAPRequestAttachment] (storage/Dialogs-NewSOAPRequestAttachment.png) </p> <p>Enter the name (e.g. invoice) and confirm with OK. This will create a new attachment as in the screenshot above. Click with your mouse on the button Load from disc to insert the local file contents. In the screenshot this is an invoice that should be sent with request to test an upload functionality. The content is - if supported - in the content preview </p> <p> </p>"},{"location":"teststepconfigviews/#supported-type","title":"Supported Type","text":"<p>s The builtin attachments preview supports:</p> <ul> <li>PDF-Documents</li> <li>Images</li> <li>Text</li> </ul> <p>If the content type is different, no preview is shown, the attachment will still  be sent with the request.</p>"},{"location":"teststepconfigviews/#reference-attachments","title":"Reference attachments","text":"<p>If you want to reference the attachment in the request editor, click with your mouse on the button Copy to Pasteboard. The Pasteboard will contain a string like so:</p> <pre><code>$(Attachment.CID:8FD11DF7-5DE5-49FD-A6A8-D1C7B1DB6A83@apijockey.com).\n</code></pre> <p>You can copy this text in any element like in the screenshot for the element msg:Data </p> <p> </p>"},{"location":"teststepconfigviews/#assertion-editors","title":"Assertion editors","text":""},{"location":"teststepconfigviews/#http-assertion-editor","title":"HTTP assertion editor","text":"<p>An HTTP assertion verifies basic HTTP-URL request specific information. HTTP Assertions are available for both HTTP Teststep and SOAP Teststep.</p> <p></p>"},{"location":"teststepconfigviews/#assertion-value","title":"Assertion value","text":"<p>Currently, there are three different data, that can be assessed:</p> <ul> <li>Status (HTTP Status)</li> <li>Data length (Binary data length)</li> <li>Response time (measured in ms)</li> </ul>"},{"location":"teststepconfigviews/#assertion-test-type","title":"Assertion test type","text":"<p>The assertion test type depends on the value type being assessed. For HTTP assertions these are integer values, so the assertion test type provides a set of options that make sense for integers.</p> <ul> <li>is equal to (single expected value)</li> <li>is smaller than (single expected value)</li> <li>is greater than (single expected value)</li> <li>is between ... and ...</li> <li>is not between ... and ...</li> <li>is in List</li> </ul>"},{"location":"teststepconfigviews/#expected-value","title":"Expected value","text":"<p>The expected value depends on the assertion test type and is either:</p> <ul> <li>single expected value</li> <li>a lower range limit and an upper range limit</li> <li>a list of values</li> </ul>"},{"location":"teststepconfigviews/#run-assertion","title":"Run assertion","text":"<p>Run assesses the current response data against the assertion test type, the expected value and the actual value. The actual HTTP values are kept in memory, so you can rerun a test as often as you want and change it.</p>"},{"location":"teststepconfigviews/#image-assertion-editor","title":"Image Assertion editor","text":"<p>An Image assertion uses a trained machine learning model to capture the text contents of a file.</p> <p></p>"},{"location":"teststepconfigviews/#query-type","title":"Query Type","text":"<p>As a first step, you need to configure, where the image data should be taken from. There are four options:</p> <ul> <li>JSONPath, enter the JSONPath expression to the binary data in the response that represents the image.</li> <li>XPath 1 (with function support), enter the XPath expression to the binary data that represents the image. Note: If you work with MTOM, you will need to select the href attribute which holds the content-ID reference.**</li> <li>XQuery / XPath 2 (no function support), enter the XPath expression to the binary data that represents the image.</li> <li>Plain Document data, the response is expected to hold binary data that represent the image.</li> </ul>"},{"location":"teststepconfigviews/#configure-your-image-assertion","title":"Configure your Image assertion","text":"<p>You have three options to check Text content on an image</p> <ul> <li>Contains text enter the expected text.</li> <li>Contains text (ignore case), enter the expected text. </li> <li>Barcode, enter the expected payload</li> </ul> <p>The blue run button together with the result status (green checkmark) validates the assertion and gives you immediate feedback.</p>"},{"location":"teststepconfigviews/#preview","title":"Preview","text":"<p>When you run the query (blue run button), APIJockey TEST will try to read the Image data, supported types are TIFF, PNG, JPEG, GIF and PDF. IF this is successful you will see the received image in the preview, together with the assertion run results as in the screenshot below:</p> <p></p>"},{"location":"teststepconfigviews/#query-result","title":"Query result","text":"<p>It seems odd that both preview and response view show the same content. This is the case as the response contains the image only. In other cases you might have a JSON Response or a SOAP Response and would apply JSONPath, XQuery or XPath to extract the Base64 encoded data, which would then internally be transformed to binary image data. If this is the case, you will see another tab Query Result that should help you identify, what part of the response document is returned by your query.</p>"},{"location":"teststepconfigviews/#textbarcode-identification","title":"Text/Barcode identification","text":"<p>When the assertion run is completed you will see a tab Text identification or Barcode identification depending on your Assertion type. This tab holds a list of Texts / Barcode payload found during the AI-scan together with a confidence vote. This can help you decide, if you want to run the assertion automatically or manually only, as a low confidence vote might be an indicator for a hit that is on reliably reproduceable. Also keep in mind that ML-model are non-deterministic. In our sample, the text identification gives these results:</p> <p> </p>"},{"location":"teststepconfigviews/#json-assertion-editor","title":"JSON assertion editor","text":"<p>The JSON assertion editor allows you to configure and run assertions against JSON response data with JSONPath. JSONPath can return a single (complex) value or a list of values.</p> <p> </p>"},{"location":"teststepconfigviews/#jsonpath-editor-with-expression","title":"JSONPath editor with expression","text":"<p>Writing assertions can  be cumbersome if you need to work with several query languages, like SQL, JSONPath and XPath to mention some of them. APIJockey TEST supports you with a large set of predefined queries that can apply on your JSON objects. The idea is to let you query the JSON objects with a small subset of JSONPath expressions and assert these objects in various ways by configuring what you actually want to test. A JSON assertion expects a valid JSONPath expression. You may enter you assertion here. The JSONPath assertion will be executed against the current response. In  case of errors, these will be displayed in the editor.</p>"},{"location":"teststepconfigviews/#expected-return-type","title":"Expected return type","text":"<p>When you edit a JSONPath Expression, you need to select the type of return value that you expect. We will use this information to provide an appropriate set of assertion test types: The JSON assertion in the above screenshot selects a list of prices. Thus, the expected return type is set to list of floating values.  You have the following list of expected return types:</p>"},{"location":"teststepconfigviews/#return-types-that-expect-one-value","title":"Return types that expect one value","text":"<p>The assertion will fail, if the expected return type does not equal the actual return type, e.g. expected: List of booleans, actual: single boolean. The assertion type determines the way the assertion is verified:</p>"},{"location":"teststepconfigviews/#boolean-value","title":"Boolean value","text":"<ul> <li>true</li> <li>false</li> </ul>"},{"location":"teststepconfigviews/#date-with-formatting","title":"Date with formatting","text":"<ul> <li>Date is day of run date</li> <li>Date is not nil</li> <li>Date is nil/null or not present</li> <li>Date is equal expected day</li> <li> <p>Date has equal distance from ... based on current timestamp :  When you expect a date to be 3 days in the past, whenever you run the testcase, you would pick the current day - 3 days. The assertion will verify if the actual day is three days before the current execution date.</p> </li> <li> <p>Date is day of run date (today)</p> </li> <li>Date is day before run date (today)</li> <li>Date is day after run date (today)</li> <li>Date applies formatting</li> </ul>"},{"location":"teststepconfigviews/#floating-point-value","title":"Floating point value","text":"<p>A Floating point is a double or float value.</p> <ul> <li>Number is equal ...</li> <li>Number is smaller than ...</li> <li>Number is greater than ...</li> <li>Number is between lower ... and upper ...</li> <li>Number is NOT between lower ... and upper ...</li> </ul>"},{"location":"teststepconfigviews/#integer-value","title":"Integer value","text":"<ul> <li>Number is equal ...</li> <li>Number is smaller than ...</li> <li>Number is greater than ...</li> <li>Number is between lower ... and upper ...</li> <li>Number is NOT between lower ... and upper ...</li> <li>Number is in expected list</li> </ul>"},{"location":"teststepconfigviews/#text","title":"Text","text":"<p>Text is a good option, if your uncertain about the return value type, but know, there is no array being returned.</p> <ul> <li>Text contains expected</li> <li>Text equals expected</li> <li>Text begins with expected</li> <li>Text ends with expected</li> <li>Text contains expected (case insensitive)</li> <li>Text equals expected (case insensitive)</li> <li>Text begins with expected (case insensitive)</li> <li>Text ends with expected (case insensitive)</li> <li>Text is empty</li> <li>Text is NOT empty</li> <li>Text has expected length</li> <li>Text has minimum expected length</li> <li>Text has maximum expected length</li> </ul>"},{"location":"teststepconfigviews/#dictionary","title":"Dictionary","text":"<p>JSON is constructed from Arrays and Dictionaries, so assessing content of dictionaries is a common check</p> <ul> <li>Dictionary entry exists (Dictionary contains key)</li> <li>Dictionary entry NOT exists (Dictionary does not contain key)</li> <li>Dictionary entry has value</li> <li>Dictionary entry has NOT value</li> <li>Element contains expected</li> <li>Dictionary contains expected (case insensitive)</li> <li>Dictionary NOT contains expected</li> <li>Dictionary NOT contains expected (case insensitive)</li> </ul>"},{"location":"teststepconfigviews/#list-of-values-arrays","title":"List of values (Arrays)","text":"<p>JSONPath may return arrays, APIJockey Test makes it easy to perform validation for all of the entries</p>"},{"location":"teststepconfigviews/#list-of-boolean-values","title":"List of boolean values","text":"<ul> <li>All elements return true</li> <li>All elements return false</li> </ul>"},{"location":"teststepconfigviews/#list-of-integer-values","title":"List of integer values","text":"<ul> <li>All values equal expected</li> <li>All values smaller expected</li> <li>All values greater expected</li> <li>All values between lower and upper range</li> <li>All values NOT between lower and upper range</li> <li>number (of array element) count equals expected</li> <li>number (of array element) count smaller expected</li> <li>number (of array element) count greater expected</li> <li>number (of array element) count between ... and ...</li> <li>number (of array element) count NOT between ... and ...</li> </ul>"},{"location":"teststepconfigviews/#list-of-date-values","title":"List of date values","text":"<ul> <li>All dates are not nil</li> <li>All dates are nil or not present</li> <li>All values are equal expected</li> <li>All values are equal to relative date based on current timestamp : </li> </ul> <p>When you expect a date to be 3 days in the past, whenever you run the testcase, you would pick the current day - 3 days. The assertion will verify if the actual day is three days before the current execution date.</p> <ul> <li>All dates are today</li> <li>All dates are yesterday</li> <li>All dates are tomorrow</li> <li>All dates apply formatting</li> </ul>"},{"location":"teststepconfigviews/#list-of-floating-values","title":"List of floating values","text":"<ul> <li>All have expected value</li> <li>All are smaller expected</li> <li>All are greater expected</li> <li>number (of array element) count equals expected</li> <li>number (of array element) count smaller expected</li> <li>number (of array element) count greater expected</li> <li>number (of array element) count between ... and ...</li> <li>number (of array element) count NOT between ... and ...</li> <li>All elements between lower and upper range</li> <li>All elements NOT between lower and upper range</li> </ul>"},{"location":"teststepconfigviews/#list-of-text-values","title":"List of text values","text":"<ul> <li>All values equal expected expected</li> <li>All values begin with expected </li> <li>All values end with expected </li> <li>All values contain expected</li> <li>All values begin with expected (case insensitive)</li> <li>All values end with expected (case insensitive)</li> <li>All values contain expected (case insensitive)</li> <li>number (of array element) count equals expected</li> <li>number (of array element) count smaller expected</li> <li>number (of array element) count greater expected</li> </ul>"},{"location":"teststepconfigviews/#list-of-dictionaries-dictionaryarray","title":"List of dictionaries {#dictionaryarray}","text":"<ul> <li>All dictionaries have expected key</li> <li>None of the dictionaries have expected key</li> <li>Element count equals expected</li> <li>Element count smaller expected</li> <li>Element count greater expected</li> <li>Element count between ... and ...</li> <li>Element count NOT between ... and ...</li> <li>All dictionaries have expected  value</li> <li>None of the dictionaries havs expected value</li> <li>All dictionaries contain expected value</li> <li>None of the dictionaries contain expected value</li> <li>All dictionaries contain expected value (case insensitive)</li> <li>None of the dictionaries contain expected value (case insensitive)</li> </ul>"},{"location":"teststepconfigviews/#expected-value_1","title":"Expected value","text":"<p>The expected value depends on the assertion test type and is either:</p> <ul> <li>single expected value</li> <li>a lower range limit and an upper range limit</li> <li>a list of values</li> <li>A JSON dictionary key name</li> </ul>"},{"location":"teststepconfigviews/#run-assertion_1","title":"Run assertion","text":"<p>Run assesses the current response data against the assertion test type, the expected value and the actual value. The actual JSON response is kept in memory, so you can rerun a test as often as you want and change it.</p>"},{"location":"teststepconfigviews/#pdf-assertion-editor","title":"PDF Assertion editor","text":"<p>A PDF Assertion verifies, if a text appears in a PDF-File.</p> <p>![Image assertion editor] (storage/PDFAssertionEditorConfig.png)</p>"},{"location":"teststepconfigviews/#query-type_1","title":"Query Type","text":"<p>As a first step, you need to configure, where the image data should be taken from. There are four options:</p> <ul> <li>JSONPath, enter the JSONPath expression to the binary data in the response that represents the PDF.</li> <li>XPath 1 (with function support), enter the XPath expression to the binary data that represents the PDF. Note: If you work with MTOM, you will need to select the href attribute which holds the content-ID reference.**</li> <li>XQuery / XPath 2 (no function support), enter the XPath expression to the binary data that represents the PDF.</li> <li>Plain Document data, the response is expected to hold binary data that represent the PDF.</li> </ul> <p>The blue run button together with the result status (green checkmark) validates the assertion and gives you immediate feedback.</p>"},{"location":"teststepconfigviews/#configure-your-pdf-assertion","title":"Configure your PDF assertion","text":"<p>You have several assertion types to verify a PDF document</p> <ul> <li>Number of pages where you enter the expected page count.</li> <li>Document contains text on page (number) where you enter the expected text and the page nr.</li> <li>Page (number) has label where you enter the expected text and the page nr.</li> <li>Document is locked where you provide if the flag must be TRUE or FALSE</li> <li>Document is encrypted where you provide if the flag must be TRUE or FALSE</li> <li>Document allows copying where you provide if the flag must be TRUE or FALSE</li> <li>Document allows printing where you provide if the flag must be TRUE or FALSE</li> <li>Document allows commenting where you provide if the flag must be TRUE or FALSE</li> <li>Document allows inserting, deleting or rotating where you provide if the flag must be TRUE or FALSE</li> <li>Document allows changes (expect document attributes) where you provide if the flag must be TRUE or FALSE</li> <li>Document allows form field entries where you provide if the flag must be TRUE or FALSE</li> </ul>"},{"location":"teststepconfigviews/#search-options","title":"Search Options","text":"<p>When you select assertion types that search for text, you have to search options:</p> <ul> <li>case insensitive</li> <li>literal (read character by character)</li> </ul> <p>![PDF assertion options] (storage/PDFAssertionOptions.png) </p>"},{"location":"teststepconfigviews/#preview-your-query","title":"Preview your query","text":"<p>When you run the query (blue run button), APIJockey TEST will try to run the query against the response. If this successful, the data will be used to interprete it as base64-encoded PDF data, if you query with JSONPath, XQuery or XPath. I. IF the query is set to Plain document data the response data is interpreted as plain PDF data. If reading the data and interpreting as PDF is successful, the PDF document appears in the tab PDF View, together with the base64-encoded query result in the tab Result, which may help you to fine-tune your query expression.</p>"},{"location":"teststepconfigviews/#xpath-assertion-editor","title":"XPath Assertion editor","text":"<ul> <li>equals with strict text comparison of the response against the expected results</li> <li>contains with simple check if the response contains the expected results</li> <li>count compares the number of elements based on evaluting the assertion against the response with the number in expected results</li> <li>countGreater compares the number of elements based on evaluting the assertion against the response with the number in expected results, which must be greater</li> <li>countGreaterEquals compares the number of elements based on evaluting the assertion against the response with the number in expected results, which must be equal or greater</li> <li>countSmaller compares the number of elements based on evaluting the assertion against the response with the number in expected results, which must be smaller</li> <li>countSmallerEquals compares the number of elements based on evaluting the assertion against the response with the number in expected results, which must be smaller or equal</li> <li>notExistsverifies that no element is found by the assertion expression against the reponse</li> <li>beginsWith with simple check if the response begins with the expected results</li> <li>endsWith with simple check if the response ends with the expected results</li> </ul> <p>Sample assertion with failed run result. Error messages are displayed in place. ![Assertion editor screenshot with error] (storage/assertioneditor-with-error.png) </p>"},{"location":"teststepconfigviews/#value-providers","title":"Value providers","text":""},{"location":"teststepconfigviews/#datatransfer-teststep","title":"Datatransfer Teststep","text":"<p>Testing efficiently means to link Teststeps efficiently together. A testcase will often use a set data. Often, this come from previous stepsUse a Datatransfer teststep to transfer data from a SOAP or HTTP Teststep to a stored variable. A Datatransfer Teststep may contain a list of datatransfers of different types Examples</p> <ul> <li>You must authenticate for a webservice through a security token service and provide a token for the business webservice under test.</li> <li>You receive a list of results and need to select a specific element for further test steps</li> </ul>"},{"location":"teststepconfigviews/#supported-datatransfer-value-providers","title":"Supported Datatransfer Value Providers","text":"<ul> <li>XPath Value Providers</li> <li>XQuery Value Providers</li> <li>JSONPath Value Providers</li> <li>Text Value Providers</li> </ul>"},{"location":"teststepconfigviews/#overview","title":"Overview","text":"<p>A Datatransfer Teststep can be created in the Teststep List View. Once it is created, selecting a Datatransfer Teststeps displays the following details view</p> <p> </p> <ul> <li>Create new XPath Value Provider, opens a dialog where you enter the name of the XPath Value Provider and creates a new list element.</li> <li>Create new XQuery Value Provider, opens a dialog where you enter the name of the XQuery Value Provider and creates a new list element.</li> <li>Create new JSONPath Value Provider, opens a dialog where you enter the name of the XQuery Value Provider and creates a new list element.</li> <li>Create new Text Value Provider, opens a dialog where you enter the name of the XQuery Value Provider and creates a new list element.</li> <li>Rename selected Datatransfer opens a dialog where you can change the name of the Datatransfer</li> <li>Result status of the current run displays an icon that visualizes the last run (success, failed, not started)</li> <li>Run selected Datatransfer(s) will run your configuration and displays the results for each Datatransfer ValueProvider in the selected list</li> <li>Enable/disable selected Datatransfer(s) will mark the ValueProviders to  be included/excluded in Test runs</li> <li>Move selected Datatransfer(s) down can help you to better organize your ValueProviders.</li> <li>Move selected Datatransfer(s) up can help you to better organize your ValueProviders.</li> <li>You see the Datatransfer list (ValueProviders), which is empty when you create a new Datatransfer Teststep</li> <li> <p>When you have may ValueProviders you may filter them by name, where we check the entered text to be contained in the ValueProvider name</p> </li> <li> <p>Pasteboard Commands</p> </li> </ul>"},{"location":"teststepconfigviews/#configuration-of-valueprovides","title":"Configuration of ValueProvides","text":"<p>When yu want to extract data from SOAP/HTTP Teststep you will create one of the above mentioned ValueProviders. Each ValueProvider has its own functionality to get data from a request or response, but the general approach is as follows</p> <ul> <li>You select a supported Teststep e.g. SOAP Teststep for Xpath or HTTP Teststep for JSONPath in the containing Testcase</li> <li>You select if you want to use the request or the response</li> <li>You configure/define you extraction logik (This is specific for each ValueProvider</li> <li>You attach am variable to  Value Provider. All ValueProviders use a common view VariableValueTransfer to perform this task</li> <li>A test run is successful, if input teststep is defined, the type (request,responseI is configured, the extraction logic does not run into an error (e.g. wrong Xpath) and a variable is referenced by this ValueProvider</li> </ul> <p></p>"},{"location":"teststepconfigviews/#xpath-value-provider","title":"XPath Value Provider","text":"<p>An XPath Value Provider allows to enter an XPath and run the XPath against a defined request or response. The result is stored in a variable as described above. When you create an XPath Value Provider and select it from the list, you get the following Details view: </p> <p> </p> <ul> <li>select input teststep is the first step where you pick a SOAP- or HTTP- Teststep that will hold a request/response</li> <li>When you have selected a teststep you can configure, if you want to read the request or response</li> <li>select XPath from existing request/response IF you have a teststep that holds a request or response you can select an element here. When the request/response is empty, the view will not show up</li> <li>enter your xpath allows you to enter an XPath, please make sure, you use XPath 1. When you edit the XPath we read the namespaces from request/response, otherwise you will have to edit it manually in the tab Namespaces</li> <li>Variable Value Transfer configures the referenced variable that will hold the Xpath expression result</li> </ul> <p></p>"},{"location":"teststepconfigviews/#xquery-value-provider","title":"XQuery Value Provider","text":"<p>An XQuery Value Provider allows you to enter a simplified XQuery or XPath expression (which supports unnamed prefixes like *:element) and run the expression against a request or response. The result is stored in a variable as described above. When you create an XQuery Value Provider and select it from the list, you get the following Details view: </p> <p> </p> <ul> <li>select input teststep is the first step where you pick a SOAP- or HTTP- Teststep that will hold a request/response</li> <li>When you have selected a teststep you can configure, if you want to read the request or response</li> <li>enter your XQuery or XPath, this ValueProvider supports a simplified XQuery/XPath 2 expression. As you can use unnamed prefixes like *:element, there is no support for prefix/namespace mappings.</li> <li>Variable Value Transfer configures the referenced variable that will hold the Xpath expression result</li> </ul> <p>"},{"location":"teststepconfigviews/#jsonpath-value-provider","title":"JSONPath Value Provider","text":"<p>A JSONPath Value Provider allows you to enter a JSONPath expression and run the expression against an HTTP Teststep request or response</p> <p>When you create a JSONPath Value Provider and select it from the list, you get the following Details view: </p> <p> </p> <ul> <li>select input teststep is the first step where you pick an HTTP- Teststep that will hold a request/response</li> <li>When you have selected a teststep you can configure, if you want to read the request or response</li> <li>enter your jsonpath that will select the elements from your request/response</li> <li>Variable Value Transfer configures the referenced variable that will hold the Xpath expression result</li> </ul> <p>"},{"location":"teststepconfigviews/#text-value-provider","title":"Text Value Provider","text":"<p>A Text Value Provider allows you to arrange a list of Text transformations in an ordered list to retrieve and transform text To illustrate how it works, we added a screenshot with a ready-configured Text Value Provider that reads  a JSON-response AND has linked a variable that holds the result The operations are applied in the order in which they are defined in the list and can be enabled/disabled, moved up and moved down</p> <p> </p> <p>You can include the following operations:</p> <ul> <li> <p>select substring with providing start and end index</p> </li> <li> <p>startIndex 0 with endIndex 0 selects the first character</p> </li> <li> <p>startIndex -1  with endIndex -1 selects the  whole text</p> </li> <li> <p>search and replace with providing the static search and static replacing text</p> </li> <li>encode to base64 creates the base64 representation of the text</li> <li>decode from base64 recreates the original text from the base representation, which is disabled in this example</li> <li>Variable Value Transfer configures the referenced variable that will hold the Xpath expression result, which is done here for a variable on the Testcase</li> </ul>"},{"location":"views-repositories-testsets/","title":"Testdefinition hierarchy","text":"<p>You manage and maintain your test definition hierarchy in four views, where two of them are located inthe sidebar:</p> <p></p> <p>The sidebar includes two followinglist view:</p> <ul> <li> <p>Repository list view</p> </li> <li> <p>Testset list view</p> </li> </ul> <p>The sidebar appearance can be changed with the following toggles</p> <ul> <li> <p>Show/hide sidebar</p> </li> <li> <p>Show Testsets on: will show the Testsets List View, off: will not display them.</p> </li> </ul>"},{"location":"views-repositories-testsets/#repository-list-view","title":"Repository list view","text":"<p>A repository is an organizational bucket where you can enter your testsets and testcases. All your definitions are synchronized on your iCloud storage across your MacOS-devices.</p> <p>This view displays all repositories and provides commands to create, edit, delete and test run commands. This view is intended to edit in the repository list or run a repository-based test and view the unterlying testsets at the same time. You Commands illustrated on the left side from top to down without the view toggle commented in the previous section</p> <p></p> <p>We follow the icons from left to right and list the views from top to down.</p> <ul> <li> <p>Create new repository adds a new repository</p> </li> <li> <p>enable/disable repository for test run includes or excludes a repository for test run or execution run</p> </li> <li> <p>Delete all selected repositories performs the deletion</p> </li> <li> <p>Edit repository name allows to rename a single selected repository</p> </li> <li> <p>move repository up and move repository down has impact on the list order and on the order they are invoked for test runs and execution runs</p> </li> <li> <p>instant run tests in repository starts a test run that walks through alls testsets and their testcase in the order they are displayed in the list views. </p> </li> <li> <p>run test execution for repository starts a test run whose results are persisted and visible. See Test run.This starts a background test run that walks through alls testsets and their testcase in the order they are displayed in the list views. </p> </li> <li> <p>instant test run status for repository and instant test run status for testset show the instant test run status. The test results are not persisted.</p> </li> <li> <p>Search input field filters the repositories based on the input - input must be contained, case insensitive</p> </li> <li> <p>selected repository defines the root element for the Testset List View</p> </li> <li> <p>Documentation of the Pasteboard commands</p> </li> </ul>"},{"location":"views-repositories-testsets/#testset-list-view","title":"Testset list view","text":"<p>The Testset list view is only visible, if the toggle Show testsets is activated</p> <p>Repositories contain Testsets. They are represented in the view above with a folder icon. All command that you can perform on testsets are available through a context menu.</p> <p></p> <ul> <li> <p>Create new Testset will open a dialog to create a new Testset</p> </li> <li> <p>Delete all selected X testset(s) will prompt you to perform the undoable deletion.</p> </li> <li> <p>Rename selected Testset will open a dialog to enter the new name.</p> </li> <li> <p>export selected Testsets to JSON-file will create a JSON-representation of the Testset list with all underlying data. See Import and Export your Test definitions.</p> </li> <li> <p>import Testsets from JSON-file will create new Testsets from a JSON-representation with all underlying data. see Import and Export your Test definitions</p> </li> <li> <p>Toggle enabled/disabled for test run  includes or excludes a Testset for a test run.</p> </li> <li> <p>Instantly run Testsets  starts a test run that walks through the testcases of the selected testset in the order they are displayed in the list views. The results are not persisted.</p> </li> <li> <p>instant test run status for repository and instant test run status for testset  show the instant test run status. The test results are not persisted.</p> </li> <li> <p>move selected Testset(s) up will change the order in th Testset list.</p> </li> <li> <p>move selected Testset(s) down  will change the order in th Testset list.</p> </li> <li> <p>Documentation of the Pasteboard commands</p> </li> </ul>"},{"location":"views-repositories-testsets/#testcase-list-view","title":"Testcase list view","text":"<p>This view displays the testcases of the selected testset</p> <p></p> <p>A testcase includes a number of tetsteps to test a specific functionality.</p>"},{"location":"views-repositories-testsets/#commands","title":"Commands","text":"<ul> <li> <p>Name of parent repository displays the current repository selection</p> </li> <li> <p>Name of parent testset displays the current testset selection</p> </li> <li> <p>create new data-based testcase sets up a base testcase with an input data teststep and a result teststep</p> </li> <li> <p>create new testcase</p> </li> <li> <p>delete all selected testcases</p> </li> <li> <p>Documentation of the Pasteboard commands</p> </li> </ul>"},{"location":"views-repositories-testsets/#special-considerations","title":"Special considerations","text":"<p>Each testcase is displayed with an icon leading its name. An icon with a dark fill color indicates a testcase with teststeps included, an icon without fill color indicates an empty testcase -  move up and move down has impact on the list order and on the order they are invoked for test runs. The order is intended to help you organize your testcases.</p> <ul> <li> <p>enable/disable includes or excludes a testcase on a test run</p> </li> <li> <p>run test starts a test run that walks through all selected testcases in the displayed order, or all testcases, when no testcase is selected.</p> </li> <li> <p>testcase list testrun result status displays the aggregrated test run result status of all executed testcases.</p> </li> <li> <p>testcase testrun result status displays the test run result status of an individual testcase.</p> </li> <li> <p>import testcases from JSON loads testcase information from a JSON file</p> </li> <li> <p>export selected testcases as JSON creates a JSON representation of the selected testcases and stores them to a file</p> </li> <li> <p>rename selected testcase</p> </li> </ul>"},{"location":"views-repositories-testsets/#teststep-list-view","title":"Teststep list view","text":"<p>This view displays the teststeps of the selected testcase</p> <p></p> <p>A teststep performs - depending on the teststep type a type-specific task within a testcase.</p>"},{"location":"views-repositories-testsets/#commands_1","title":"Commands","text":"<ul> <li> <p>Create SOAP Teststep opens a dialog to specify the WSDL and the operation that you want to test. See tutorial Create SOAP Teststep</p> </li> <li> <p>Create HTTP Teststep creates a teststep for HTTP requests including JSON body. See tutorial Create HTTP Teststep</p> </li> <li> <p>Create Datatransfer Teststep creates a teststep with an empty list of Teststep value providers such as XPath and XQuery value providers. See Datatransfer Teststep</p> </li> <li> <p>Create RandomizeTeststep creates a teststep with an empty list of random value providers based on concatenated strings or uuids. See View Randomizeteststep</p> </li> <li> <p>Create Randomized ValuelistTeststep creates a teststep that reads a CSV file and allows to configure output columns and their formatting. See Randomizedvaluelist Teststep View.</p> </li> <li> <p>Create Manual Randomized ValuelistTeststep creates a teststep that let you edit a table and allows to configure output columns and their formatting. see Manual RandomizedvaluelistTeststep View.</p> </li> <li> <p>Each Teststep type is displayed with its name and a specific icon to distinguish the teststep type.</p> </li> <li> <p>delete all selected teststeps</p> </li> <li> <p>rename selected teststep</p> </li> <li> <p>move up and move down has impact on the list order and on the order they are invoked for test runs. The order is intended to define which teststep needs the input of another teststep.</p> </li> <li> <p>enable/disable includes or excludes a teststep on a test run</p> </li> <li> <p>run test starts a test run that walks through all selected teststep in the displayed order, or all teststeps, when no teststep is selected.</p> </li> <li> <p>teststep list testrun result status displays the aggregrated test run result status of all executed teststeps.</p> </li> <li> <p>teststep testrun result status displays the test run result status of an individual teststep.</p> </li> <li> <p>Documentation of the Pasteboard commands</p> </li> </ul>"},{"location":"views-teststeps/","title":"Teststeps","text":"<p>There are several teststeps available whick you can create from the teststep list</p>"},{"location":"views-teststeps/#overview","title":"Overview","text":"<p>This overview helps you navigate on this page and understand the features of each teststep:</p>"},{"location":"views-teststeps/#http-teststep","title":"HTTP Teststep","text":"<p>An HTTP Teststep allows you to send a HTTP request for several HTTP methods such as GET, POST and PUT. Additionally, you may send JSON or XML in the HTTP-Body. See more in HTTP Teststep View</p>"},{"location":"views-teststeps/#html-teststep","title":"HTML Teststep","text":"<p>An HTML teststep loads a website and displays the contents in a browser window. This is helpful, when you test web services postprocesing. You may visually check the website content or create a list of Javascript-based assertions on the webpage. See more in HTML Teststep View </p>"},{"location":"views-teststeps/#soap-teststep","title":"SOAP Teststep","text":"<p>A SOAP Teststep is a WSDL-aware teststep that reference a specific webservice method. You have request and response area with various that help you manage the complexity of SOAP-XML data models based on WSDL-XSD-Schema definition. See more in SOAP Teststep View. SOAP teststeps support WSDL quick search and context sensitive help.</p>"},{"location":"views-teststeps/#randomize-teststep","title":"Randomize Teststep","text":"<p>A Randomize Teststep defines rules or data to randomize your request input. This is a common strategy in testing to have variants of you request to make sure you'll find gaps in the implementation. A common pitfall in webservice testing is to rely on a small set of regression tests with a static set of input data.  The Randomize Teststep includes a list of Random Value Providers to serve random data, like random strings and random locations. See more in Randomize Teststep View. See the tutorial Create a Randomize Teststep with a Random Value Provider to learn how to this teststep to create a random Vehicle Identifier Number.</p>"},{"location":"views-teststeps/#randomized-valuelist-teststep","title":"Randomized Valuelist Teststep","text":"<p>A Randomize Teststep reads a CSV-file to randomize your request input. The intention is the same as with the Randomize Teststeps except that the randomized data must fit together. See more in Randomized Valuelist Teststep View. See the tutorial Create a Manual RandomizedValuelist Teststep in case you have not yet worked with this teststep type.</p>"},{"location":"views-teststeps/#manual-randomized-valuelist-teststep","title":"Manual Randomized Valuelist Teststep","text":"<p>A Randomize Teststep reads a CSV-file to randomize your request input. The intention is the same as with the Randomize Teststeps except that the randomized data must fit together. See more in Manual Randomized Valuelist Teststep</p>"},{"location":"views-teststeps/#html-teststep-view","title":"HTML Teststep View","text":""},{"location":"views-teststeps/#overview_1","title":"Overview","text":"<p>An HTML teststep is a regular teststep in the teststep list. You need to provide an URL to load. The URL can be static or a variable value, as with SOAP teststeps or HTTP teststeps. You see an EnvironmentVariable In the address line of the WebView in  above screenshot and a selected RunEnvironment APIStaging,</p> <ul> <li>tab WebView contains the browser window with the content as it would appear in a Web browser like Safari</li> <li>tab Assertions holds the javascript assertions to verify the expected content of the HTML content.</li> <li>action share image creates an image of the webview content and lets you share it using the systems' sharing options</li> <li>action share pdf creates a PDF document of the webview content and lets you share it using the systems'sharing options</li> <li>action download image creates an image of the webview content and opens your default viewer for images</li> <li>action download pdf creates a PDF document of the webview content and opens your default viewer for PDF documents </li> <li>run teststep reloads the page and reevaluates the assertions</li> <li>teststep result includes successful loading of the URL and the result of the assertions.</li> </ul>"},{"location":"views-teststeps/#html-javascript-assertion","title":"HTML Javascript Assertion","text":"<p>The screenshot below shows you a list of assertions for the current HTML teststep with one selected to show a sample assertion with expected return value. </p> <p> An assertion must return a true (=1) value to be successful.</p> <ul> <li>add a new assertion</li> <li>delete selected assertions</li> <li>rename a selected assertion</li> <li>move up selected assertions</li> <li>move down selected assertions</li> <li>toggle enabled enables or disables selected assertions</li> <li>run selected assertion in the list order</li> <li>result status displays the result for the current run (selection)</li> </ul>"},{"location":"views-teststeps/#http-teststep-view","title":"HTTP Teststep View","text":"<p>An HTTP Teststep allows you to send a HTTP request for several HTTP methods such as GET, POST and PUT. Additionally, you may send JSON in the HTTP-Body.</p> <p>See Create HTTP Teststep, to add a new HTTP Teststep for a testcase</p> <p>The screenshot contain sample URLs from the ITunes store, provided on iTunes Search API Documentation Archive</p> <p>Please don't understand these screenshots as any kind of endorsement from Apple\u00ae for this software.</p> <p></p>"},{"location":"views-teststeps/#request-overview","title":"Request overview","text":"<p>The Request editor provides four tabs, we will cover these in the order they appear on the screen.</p>"},{"location":"views-teststeps/#request-tab","title":"Request (Tab)","text":"<ul> <li> <p>URL: Enter the URL that you want to test against.</p> </li> <li> <p>URL edit mode: There are three url edit modes available. We will cover these below</p> <ul> <li> <p>Selected HTTP Teststep          The HTTP Teststep editor appears, when you select an HTTP Teststep in the teststep list</p> </li> <li> <p>Run URL request           Press this button to send yor URL request to the URL</p> </li> <li> <p>Response viewer:          This viewer displays the JSON content and may be empty, if no content is returned from the server.</p> </li> </ul> </li> </ul>"},{"location":"views-teststeps/#url-edit-mode","title":"URL edit mode","text":"<p>There are three url edit modes:</p> <ul> <li>URL as a single String: </li> </ul> <p>You enter the full url including host, port, route and query parameters, this is the default</p> <ul> <li> <p>URL with separate list of query parameters:                  You have separate input fields for schema, host, port, route and an editable list of query parameters</p> </li> <li> <p>URL with separate list for route parameters and query parameters:                  You have separate input fields for schema, host, port and editable lists of route parameters and query parameters</p> </li> </ul>"},{"location":"views-teststeps/#configure-your-request","title":"Configure your request","text":"<p>The HTTP teststep configuration allows you the select the HTTP method and the authentication method (none, basic authentication and bearer authentication).</p>"},{"location":"views-teststeps/#supported-http-methods","title":"Supported HTTP methods","text":"<pre><code>            - GET\n            - POST\n            - PUT\n            - DELETE\n            - HEAD\n            - PATCH\n</code></pre>"},{"location":"views-teststeps/#supported-mime-content-types-for-post-and-put","title":"Supported MIME content types for POST and PUT","text":"<pre><code>            - application/json\n            - text/xml\n            - application/soap+xml\n</code></pre>"},{"location":"views-teststeps/#resolvedrequest-tab","title":"resolvedRequest (Tab)","text":"<p>This viewer show the request with resolved variable values</p>"},{"location":"views-teststeps/#header-fields","title":"Header fields","text":"<p>This view displays the HTTP headers used for the URL request. You may create your custom set of HTTP headers for test reasons.</p> <p></p> <ul> <li> <p>use manual header fields: Set the toggle to true, to override the automatic header field configuration.</p> </li> <li> <p>Add new HTTP Header:  Creates a new header. There is no automatic check for duplicate names, use the Button check for duplicates to perform this check.</p> </li> <li> <p>check for duplicates:  Header fields names must be unique, If you use manual header fields, press this button to check for duplicates</p> </li> <li> <p>arbitrary selection to remove elements:  You can select arbitrary elements to remove these.</p> </li> <li> <p>remove selected elements:  Press this button to remove the selected elements. This has only an effect, if you use manual headers.</p> </li> </ul>"},{"location":"views-teststeps/#assertions","title":"assertions","text":"<p>The assertion list view is described here: HTTP Teststep assertion list</p>"},{"location":"views-teststeps/#soap-teststep-view","title":"SOAP Teststep View","text":"<p>A SOAP Teststep is a WSDL-aware Teststep that reference a specific webservice method. You have request and response area with various that help you manage the complexity of SOAP-XML data models based on WSDL-XSD-Schema definition. Run your SOAP request and verify the response. You can view the HTTP header fields for request and response. A Soap Teststep is created based on  a WSDL operation either for a SOAP 1.1 or SOAP 1.2 WsdlService Port </p>"},{"location":"views-teststeps/#overview_2","title":"Overview","text":"<p>The SOAP Teststep View provides a number of sub views and configuration options.</p> <ul> <li>Teststep configuration options that effects request and response handling.</li> <li>A Request view with a number of views that shows request information</li> <li>A Response view with a number of views that show response information</li> </ul>"},{"location":"views-teststeps/#teststep-configuration-options","title":"Teststep configuration options","text":""},{"location":"views-teststeps/#teststep-configuration-view","title":"Teststep configuration view","text":"<ul> <li> <p>Send Request with MTOM will transform your request in the required MTOM request format and replace all occurrences of elements of type {http://www.w3.org/2005/05/xmlmime} base64Binary with the {http://www.w3.org/2004/08/xop/include }Include. It will apply all required transformations to create a valid MTOM optimized request.</p> </li> <li> <p>Resolve XOP:include in Response transforms an MTOM-optimized response to a response without optimizations. It will inline the SOAPAttachment data and transform all occurrences of {http://www.w3.org/2004/08/xop/include }Include with {http://www.w3.org/2005/05/xmlmime} base64Binary</p> </li> <li>Webservice url is required to send the request to the webservice endpoint under test. If you choose to use View Environment and have configured the webservice urls for this WSDL and the selected Run Environment, the url becomes non-editable. If no authentication is selected the HTTP header autorization is omitted otherwise sent with the base64 encoded string of username for basic authentication and password for basic authentication as displayed in preview base64 encoded authentication string.</li> <li>WSDL operation reference is a required setting for a SOAP Teststep. APIJockey TEST uses the WSDL-definitions to validate the request and the response. It allows for using MTOM-optimized requests as described above. When you click on the binocular button, you will get a dialog with a list of WSDL definitions with their SOAP 1.1. and SOAP 1.2 operations.</li> <li>Authentication options include no authentication, basic authentication with username and password and bearer authentication with bearer token in a free to define http header.</li> </ul>"},{"location":"views-teststeps/#soap-request-editor-overview","title":"SOAP Request editor overview","text":"<p>The request view contains several tabs to display different information</p> <ul> <li>Request with variables your XML editor with syntax highlighting</li> <li>XML editor is a visual tree-like editor that allows you to edit XML elements with text content and select variables.</li> <li>Request with variable values resolved. Viewer that resolves values of Variables</li> <li>Assertions based on simplified XPath that assert occurrences of specified elements. Details see below</li> <li>Attachments allow for selection and preview of documents that you want to send with your request.</li> <li>URLRequest Details displays the HTTP headers used to create the request.</li> </ul>"},{"location":"views-teststeps/#tab-request-with-variables","title":"Tab Request with variables","text":"<ul> <li> <p>Run Teststep will send the request to the specified URL, wait for the response and run all assertions against the response.</p> </li> <li> <p>Request editor is your Syntax-Highlighting editor to work on your request</p> </li> <li> <p>Create new request from WSDL operation will delete your current request and create a new one based on the current WSDL operation information.</p> </li> <li> <p>Validate request will validate against the WSDL operation information and displays errors in case of non-conformance with this specification.</p> </li> <li> <p>Pretty print XML does indents and create newlines for each element.</p> </li> </ul> <p>You enter your request in this syntax highlighting XML editor. Variables are colored to make them easy to distinguish, see Variables</p> <p></p>"},{"location":"views-teststeps/#xml-editor","title":"XML editor","text":"<p>The XML editor provides an additional edit option, with focus on XML elements that have text content and where the structure does not need to be changed. This is often the case for existing requests where values only need to be variable-ized or just changed.</p> <p>NOTE: Press the  ENTER key when editing is done to update the underlying xml.</p> <p></p>"},{"location":"views-teststeps/#request-with-variable-values-resolved","title":"Request with variable values resolved","text":"<p>When you use variables, see Variables their name/value will be represented as follows:</p> <ul> <li>tab Request with Variables as a highlighted variable identifier</li> <li>tab XML editor no highlighting of the variable identifier</li> <li>tab Request with Variables resolved with the current variable value, Attachment references are NOT resolved</li> </ul> <p>When you switch from your request editor to this tab, APIJockey TEST will reevaluate the variables and resolve these as it does when sending the request. Bear in mind that this is only a viewer. </p>"},{"location":"views-teststeps/#randomize-teststep-view","title":"Randomize Teststep View","text":"<p>A Randomize Teststep defines rules or data to randomize your request input. It holds a list of Random Value Providers of two types of random data</p> <ul> <li>String Random Value Provider and </li> <li>Location Random Value Provider</li> </ul> <p>The screenshot below shows a Randomize Teststep with two Random Value Providers of each of these types. You can have an arbitrary number of Random Value Providers in this teststep. </p> <p>You see a RandomizeTeststep Locations selected in the Teststep list view.  The teststep holds three RandomValueProviders, two StringRandomValueProviders (VIN, numberplate) and one LocationRandomValueProvider (New York). The RandomValueProviders vend their random values through variables, which can be accessed within requests and assertions.</p>"},{"location":"views-teststeps/#string-random-value-provider","title":"String Random Value Provider","text":"<p>A StringRandomValueProvider defines a list of rules (StringRandomValueExpression) to create random strings. </p>"},{"location":"views-teststeps/#string-random-value-provider-configuration","title":"String Random Value Provider configuration","text":"<p>You can create an arbitrary number of random expression values which are simply concatenated from top to bottom.</p> <p></p> <ul> <li>text adds a new string-based random expression value. You configure the characters to include and the text length. In case you need a fixed value to occur at a specific position, switch the value expression type from variable to fixed.</li> <li>integer adds a new integer-based random expression value. You configure the min and max value and the formatting options.</li> <li>decimal adds a new decimal-based random expression value, you configure the min and max value and the formatting options.</li> <li>date adds a new calendar-based random expression value, you configure the earlist and latest allowed dates and the formattions options.</li> <li>uuid adds a new UUID value provider.</li> <li>rename your selected random value expression</li> <li>delete your selected random value expressions</li> <li>move up/down your selected random value expressions to change occurence in your final string</li> <li>enable/disable your selected random value expressions</li> <li>run evaluates your expressions and displays the current result. When a referenced variable is configured, the variable will hold the value for further use in requests and assertions.</li> </ul>"},{"location":"views-teststeps/#example-stringrandomvalueprovider","title":"Example StringRandomValueProvider","text":"<p>The VIN random text consists of a single StringRandomValueExpresion, which you can create with the text button. The number plate random text is more elaborate and shows the concatenation of three string random value expressions:</p> <p></p>"},{"location":"views-teststeps/#location-random-value-provider","title":"Location Random Value Provider","text":"<p>A location random value Provider provides you with a random adddress and geolocation coordinates from within a specified region. In the example screenshot below we have chosen an area in New York, specifically parts of Lower Manhatten/New Jersey and Brooklyn to get random location data:</p> <p></p> <p>A Location Random Value Provider vends a set of data among which are: - geolocation coordinates - country - timezone - street / number - postal code - place - administrative area data</p> <p>Each of these fields can be accessed by a separate variable.</p>"},{"location":"views-teststeps/#teststep-assertions","title":"Teststep Assertions","text":"<p>Testing webservices can become repetitive and cumbersome. Assertions help you to automate checks and free you from repetitive error-prone verifications. You will find more time to further explore responses and find unexpected behaviour. Assertions have their own tab in the SOAP Request view and allow you for editing assertions while viewing the Response.</p> <p></p> <p>APIJockey TEST supports the following assertions types</p> <ul> <li> <p>create a new XPath Assertion to verify the SOAP Response with an XPath expresssion. APIJockey TEST will support you with a visual editor to enter the XPath and to define the type of verification.  See XPath Assertion editor.</p> </li> <li> <p>create a new HTTP Assertion  HTTP Status, response time and data length, see HTTP Assertion editor</p> </li> <li> <p>create a new Image Assertion  will create an AI-based Assertion that will assess Text and Barcode information from your image. Note: PDF-Documents are also considered images in this Assertion type.See Image Assertion editor</p> </li> <li> <p>create a new PDF Assertion  will create a PDF Assertion that will assess Text and document property information from your PDF-Document. Note: Sometimes PDF-Documents contain images, only and no text will be found. See PDF Assertion editor. In this case, you will need to use the Image Assertion type.</p> </li> </ul>"},{"location":"views-teststeps/#attachments","title":"Attachments","text":"<p>Attachments are used in both requests and responses.</p>"},{"location":"views-teststeps/#url-request-header","title":"URL request header","text":"<p>This tab displays the HTTP header used with the last URL request and may be empty if no request has been sent after (re-)starting APIJockey TEST.</p>"},{"location":"views-teststeps/#view-datatransferteststep","title":"View DatatransferTeststep","text":"<p>A Datatransfer teststep allows you to query results from  teststeps in the current testcase and store them in a variable. This is helpful in cases where you need to establish a set of requests where the input of a request is part of the response of the previous teststep. The Datatransfer Teststep defines a number of different ValueProviders, all of which expect a String expression as query result to store in a variable.</p>"},{"location":"views-teststeps/#overview_3","title":"Overview","text":"<p>When you create and select Datatransfer Teststep in the Teststep list view, the following editor appears.</p> <p></p> <ul> <li> <p>create new Javascript expression opens a dialog that creates a Javascript ValueProvider to query data from a HTML teststep in this testcase.</p> </li> <li> <p>create new JSONpath expression opens a dialog to create an JSONPath ValueProvider to query data from a previous HTTP Teststep (request or response) in this testcase.      </p> </li> <li> <p>create new XPath expression opens a dialog to create an xpath expression to query data from a previous teststep (request or response) in this testcase.</p> </li> <li> <p>create new XQuery expression opens a dialog to create an xpath expression to query data from a previous teststep (request or response) in this testcase. Note that you will use XPath in XQuery as well, so depending on your use case, XQuery may be the choice.</p> </li> <li> <p>delete the selected datatransfers</p> </li> <li> <p>rename the selected datatransfer</p> </li> <li> <p>run datatransfer needs a referenced variable. See VariableValueTransfer  for details</p> </li> <li> <p>run result status displays the test run result status of an individual teststep.</p> </li> <li> <p>enable/disable includes or excludes a datatransfer on a test run</p> </li> <li> <p>move up and move down has impact on the list order and on the order they are invoked for test runs. As the datatransfers query teststep request and response they cannot have dependencies on each other. The order is intendedfor your organization, only.</p> </li> <li> <p>Documentation of the pasteboard commands</p> </li> </ul>"},{"location":"views-teststeps/#javascript-valueprovider","title":"Javascript ValueProvider","text":"<p>When you want to query HTML content from a HTML Teststep, this value provider allows to enter a Javascript expression that returns a string value. </p>"},{"location":"views-teststeps/#jsonpath-valueprovider","title":"JSONPath ValueProvider","text":"<p>When you want to query JSON structures from a HTTP Teststep, this value provider allows to enter a JSONPath expression that returns a string value from the request or response.</p>"},{"location":"views-teststeps/#xpath-valueprovider","title":"XPath ValueProvider","text":"<p>When you want to query XML/SOAP structures from a HTTP or SOAP Teststep, this value provider allows to enter an XPath 1 expression that returns a string value from the request or response. You can also use the built-in treeview to create the XPath expression</p>"},{"location":"views-teststeps/#xquery-valueprovider","title":"XQuery ValueProvider","text":"<p>When you want to query XML/SOAP structures from a HTTP or SOAP Teststep, this value provider allows to enter a XQuery 1 expression that returns a string value from the request or response. You can also use the built-in treeview to create the XPath expression</p>"},{"location":"views-teststeps/#walkthrough-to-create-an-xpath-datatransfer","title":"Walkthrough to create an XPath datatransfer","text":"<p>We will create an XPath datatransfer (value provider) with a namespace-aware XPath expression. Be aware that we will use the request for this XPath expression. In general, you may use the response for your query. To make this work, you need to walk through our getting started tutorial. Once you are done, you need to change the request as follows: We will query the value of msg:Element and store it in a testcase variable</p> <pre><code>&lt;div&gt;\n&lt;pre&gt;\n&amp;lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&amp;gt;\n&amp;lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&amp;gt;\n&amp;lt;soapenv:Header&amp;gt;&amp;lt;/soapenv:Header&amp;gt;\n&amp;lt;soapenv:Body&amp;gt;\n&amp;lt;msg:Enumerate xmlns:msg=\"http://schemas.xmlsoap.org/ws/2004/09/enumeration\"&amp;gt;\n&amp;lt;!-- continue here --&amp;gt;\n&amp;lt;msg:Element&amp;gt;USD&amp;lt;/msg:Element&amp;gt;\n&amp;lt;/msg:Enumerate&amp;gt;\n&amp;lt;/soapenv:Body&amp;gt;\n&amp;lt;/soapenv:Envelope&amp;gt;\n&lt;/pre&gt;\n&lt;/div&gt;\n</code></pre> <p>*&gt;</p>"},{"location":"views-teststeps/#input-configuration","title":"Input configuration","text":"<p>Click with your mouse on the button create new XPath expression. This will open a dialog. Enter the name currency and confirm with ok. You will see the new datatransfer value provider in the list.</p> <p></p> <p>Click with your mouse on the teststep Enumerate. This will link the teststep with the value provider and display the following view:</p> <p></p> <ul> <li> <p>You may remove the current teststep reference with the button remove configuration.</p> </li> <li> <p>read from You may switch to request/response of the referenced teststep to query data, default is response.</p> </li> </ul> <p>We need to reference the request for our walkthrough. For this reason the screenshot displays the value request after change from the default as the input type of the value provider. We enter a simple, namespace aware XPath-Expression. //msg:Element/text() Now, we run this XPath expression and will get an error message</p> <p>Click with your mouse on the button run XPath value provider This will show an error message.</p> <p></p> <p>The reason for the error message is an unsatisfied mapping from the prefix to the namespace. This can be resolved very easily. Click on the button remove error message as we don't need this error message.</p> <p></p> <p>Switch to to the tab Namspaces and click with your mouse on the button preset namespaces from input teststep</p> <p></p> <p>This will load the namespaced defined in the input XML (request) with the prefixes used in the XML. </p> <p>You may run the XPath expression again, and will get error message that no variable has been loaded.</p> <p>Create your own testcase variable currency. In case you're uncertain, how to proceed, see Create a VariableValueTransfer. Then run the value provider again. The result should be as follows: </p> <p></p>"},{"location":"views-teststeps/#view-randomizeteststep","title":"View Randomizeteststep","text":"<p>This teststep editor lets you manage a list of random value providers based on String, Integer, Double, Date and UUID data types.</p>"},{"location":"views-teststeps/#discussion","title":"Discussion","text":"<p>A Randomizeteststep supports a list of random values that store their values in variables. When you select a Randomizeteststep. you will see an empty editor, as in the screenshot below. A random value provider creates a Text/String based on a  list of individual value sub elements from different data types. It is a powerful randomizing utility, and you may need to get used it. The fact that no coding is necessary may make this one of your favorite tools to randomize you requests.</p> <p></p>"},{"location":"views-teststeps/#commands","title":"Commands","text":"<ul> <li>create new random value creates a new random value provider.</li> <li>rename selected element</li> <li>delete all selected elements</li> <li>move up and move down has impact on the list order and on the order they are invoked for test runs. The order is intended to define which teststep needs the input of another teststep.</li> <li>run value provider list regenerates new random values for all selected elements in the displayed order, or all elements, when no element is selected.</li> <li>Documentation of the pasteboard commands</li> </ul>"},{"location":"views-teststeps/#randomvalueproviders","title":"RandomValueProviders","text":"<p>A RandomizeTeststep includes an (initially empty) list of RandomValueProviders</p> <p></p> <p>When you need to provide several independent random values at a certain point in your teststep order, you would need a list of RandomValueProvider. depending on your underlying data type, you have to choose between:</p> <ul> <li>Text: Creates an expression value with arbitrary characters in a specified length</li> <li>Integer: Creates an expression value between a lower range and an upper range in a specified formatting</li> <li>Double: Creates an expression value between a lower range and an upper range in a specified formatting</li> <li>Date: Creates an expression value between a lower range and an upper range in a specified formatting</li> <li>UUID: Creates a UUID</li> <li>rename: opens a dialog to rename a selected element</li> <li>delete: deletes the selection</li> <li>move up: moves the selection up in the list</li> <li>move down: moves the selection down in the list</li> <li>enable: enables/disables the selection</li> <li>run expressions: The RandomValueProvider returns a concatenation of the expressions from top to down as one result.</li> </ul>"},{"location":"views-teststeps/#text-randomvalue-expression","title":"Text Randomvalue expression","text":"<p>n Use this type if you want to create a text with arbitrary characters that may occur in a fixed length value. (/storage/RandomizeTeststep-VariableTextExpression.png\" alt=\"screenshot RandomizeTeststep variable text expression\"/&gt;</p> <ul> <li>current random value displays the result of the random value generation. </li> <li>text length defines, how long the text should be. Each character can be one of included characters.</li> <li>This behaviour is applied, when you choose the value expression type variable random text</li> </ul> <p>A text random value expression may be part of a list of expression. Part of this concatenated text may be a fix character string, e.g. the first three characters must be ABC </p>"},{"location":"views-teststeps/#integer-randomvalueexpression","title":"Integer RandomValueExpression","text":"<p>Use this, if you want to provide an integer random value between a lower and an upper range with or without formatting.  Usage instructions</p> <ul> <li>define the included lower range</li> <li>define the excluded upper range</li> <li>set the formatting for positive numbers</li> <li>set the formatting for negative numbers. It might be the case that you want to return a negative number as its absolute value</li> </ul>"},{"location":"views-teststeps/#double-randomvalueexpression","title":"Double RandomValueExpression","text":"<p>Use this, if you want to provide a random double value between a lower and an upper range with or without formatting.  Usage instructions</p> <ul> <li>define the included lower range</li> <li>define the excluded upper range</li> <li>set the formatting for positive numbers. This may include special characters as a currency indicator.</li> <li>set the formatting for negative numbers.</li> </ul>"},{"location":"views-teststeps/#date-randomvalueexpression","title":"Date RandomValueExpression","text":"<p>Use this, if you want to provide a random formatted date between a lower and an upper range with or without formatting.  Usage instructions</p> <ul> <li>set the first possible date</li> <li>set the last possible date (excluded)</li> <li>set the mandatory formatting.</li> </ul>"},{"location":"views-teststeps/#uuid-randomvalueexpression","title":"UUID RandomValueExpression","text":"<p>Use this, if you need a unique identifier, e.g.  to have a trace in your logging system.</p>"},{"location":"views-teststeps/#variablevaluetransfer","title":"VariableValueTransfer","text":"<p>Once you have set up the RandomValueProvider, you will need to define the VariableValueTransfer</p>"},{"location":"views-teststeps/#manual-randomizedvaluelistteststep-view","title":"Manual RandomizedvaluelistTeststep View","text":"<p>A Manual Randomizedvaluelist teststep takes a list of columns with equal number of row and provides randomized values from this table in variables that can be used in following teststeps. The purpose is to permute data to a maximum. This helps to test efficiently webservices with a varying (even small) set of test data. A small number of data can thus provide more combinations when repeating a test. Repeating testcases without data variations has only limited benefits. You would not test thoroughly, and test all combinations of testcases is an endeavour that only few testers will continue to perform in the sense of regression testing. See Create a RandomizedValuelist Teststep to add this teststep.</p>"},{"location":"views-teststeps/#overview-of-the-configuration-options","title":"Overview of the configuration options","text":"<p>Manual Randomized Valuelist Teststep overview</p> <p>The view contains three main parts</p> <ul> <li>Column editor (blue bordered area)</li> <li>Variables transfer (red bordered area)</li> <li>Editable table</li> </ul> <p>The teststep configuration foresees the following elements:</p>"},{"location":"views-teststeps/#manual-randomizedvaluelist-teststep-view-details","title":"Manual Randomizedvaluelist Teststep view details","text":""},{"location":"views-teststeps/#column-editor-view","title":"Column editor view","text":"<p>You maintain a list of columns for your editable tables. The current columns are displayed as a list with configuration information</p> <ul> <li>add column creates a new column. This will create empty contents for existing rows and a testcase variable that is referencing this column.</li> <li>Enable column(s): A column value is transferred to a variable only, if the column is enabled. You may exclude (ignore) columns in a CSV file. That way you don't need to modify the CSV file itself. All selected columns are enabled independent of their current state.</li> <li>Disable column(s): The selected columns are disabled. No value will be transferred to the connected variable. IF there is a value in the variable e.g. due to manual editing or previous runs, this value will remain. You may optionally remove the variable. A column that is disabled has the platform specific secondary color, in general this is grey instead of dark black text color, both in the column list and the Value list preview on the right side.</li> <li>display column(s): A column can be displayed and not displayed in the preview. This may help you to focus on specific columns during editing. This has impact on the actual transferral on variables. A column that is shown has a different Icon that one that is not displayed.</li> <li>Hide column(s): Removes all selected columns from the preview, You may focus on a single column or any subset of columns that you want to inspect and/or format. </li> <li>rename column will rename the current column in the table.</li> <li>delete column removes all selected columns from existing rows.</li> </ul>"},{"location":"views-teststeps/#show-output-view-variables-transfer-configuration","title":"(Show) Output view (Variables' transfer configuration)","text":"<p>This is explained in full detail in Output view (Variables' transfer configuration) in Randomizedvaluelist Teststep.</p>"},{"location":"views-teststeps/#editable-table","title":"Editable table","text":"<p>This editable table displays all shown columns. No further formatting applies. The following screenshot shows:</p> <ul> <li>two defined columns (first name, last name</li> <li>add single row will add a single row for all columns</li> <li>add number of rows will show a dialog where you enter the number of rows and create the number of rows</li> <li>delete selected row(s)will delete the selected rows without further warning!</li> <li>table rows show only columns with diplay equals true (see Column editor view)</li> </ul>"},{"location":"views-teststeps/#randomized-valuelist-teststep-view","title":"Randomized Valuelist Teststep View","text":"<p>A Randomized Valuelist Teststep takes a table of values (CSV-File technically) and provides randomized values from this table in variables that can be used in web service requests. The purpose is to permutate request data to a maximum. This helps to test efficiently webservices with a varying (even small) set of test data. A small number of data can thus provide more combinations when repeating a test. Repeating testcase without variation has only limited benefits. You would not test thoroughly and test all combinations of testcases is an endeavour that only few testers will continue to perform in the sense of regression testing. See Create a RandomizedValuelist Teststep to add a new RandomizedValuelist Teststep for a testcase.</p>"},{"location":"views-teststeps/#overview-of-the-configuration-options_1","title":"Overview of the configuration options","text":"<p>The teststep configuration foresees the following elements:</p> <ul> <li>enable/disable columns</li> <li>randomizing on a row base or randomizing for each column</li> <li>show/hide columns</li> <li>configure the output variables (name / parent element)</li> </ul> <p>The following example displays favorite U.S. first and common last names, together with a combination of some postal codes and states. The premise is to combine first and last names randomly and keep a given postal code and state combination. We would use two Randomizedvaluelist teststeps to perform this task.</p>"},{"location":"views-teststeps/#randomizedvaluelist-teststep-view-details","title":"Randomizedvaluelist Teststep view details","text":"<p>The view contains three main parts</p> <ul> <li>Column editor (upper left) and column formatting</li> <li>Variables transfer (lower left)</li> <li>Formatted value list preview (table view on the right)</li> </ul>"},{"location":"views-teststeps/#column-editor-view_1","title":"Column editor view","text":"<p>A CSV file is interpreted as a list of rows consisting of equal columns. You may have been provided with a file and may configure the columns that you want to use and foresee further formatting</p> <ul> <li>Enable columns: A column value is transferred to a variable only, if the column is enabled. You may exclude (ignore) columns in a CSV file. That way you don't need to modify the CSV file itself. All selected columns are enabled independent of their current state.</li> <li>Disable columns: The selected columns are disabled. No value will be transferred to the connected variable. IF there is a value in the variable e.g. due to manual editing or previous runs, this value will remain. You may optionally remove the variable. A column that is disabled has the platform specific secondary color, in general this is grey instead of dark black text color, both in the column list and the Value list preview on the right side.</li> <li>Show columns: A column can be displayed and not displayed in the preview. This may help you to focus on specific columns during editing. This has impact on the actual transferral on variables. A column that is shown has a different Icon that one that is not displayed.</li> <li>Hide columns: Removes all selected columns from the preview, You may focus on a single column or any subset of columns that you want to inspect and/or format. </li> </ul>"},{"location":"views-teststeps/#formatting","title":"Formatting","text":"<p>The formatting view is visible when you select a single column in the column editor view. The formatting options depend on the underlying type that was identified during the process of reading the CSV file.</p> <ul> <li>String values</li> <li>Numbers (Integers, Double, Float)</li> <li>Dates</li> </ul> <p>String values can be any text, boolean values or dates in text representations that are not recognized. While booleans can be easily interpreted by changing the reading options&gt; the text representation of dates may vary for each column. Therefore, you may choose to redefine a column value type from string to date and apply formatting for the data when transferred to a variable: Numbers (Integers, Double, Float) are in general easy to interpret, Here you can apply a number formatting for positive and negative values: Dates are identified if they follow the ISO 8601 string representation. If the CSV file holds dates with a different date format, you may still process them by applying the Treat as Date flag.</p>"},{"location":"views-teststeps/#output-view-variables-transfer-configuration","title":"Output view (Variables' transfer configuration)","text":"<p>A randomized value list foresees a variable transfer for each column that is enabled. The variables can be connected to the testcase, parent teststep or parent repository. You will only be able to run the teststep successfully, when you have created and connected variables to each individual columns. This can be done with a single click and repeated whenever required.</p> <ul> <li>Show output view (variables connected with columns): shows or hides the entire view. Once the configuration is done you may hide this view.</li> <li>run randomize teststep and update variables: This command is equal to the run command in the teststep list view. It provides a randomized value for each column and updates the referenced variable.</li> <li>select randomize typeYou may want to randomize columns independently or row-based. In our example file, you may want to randomize first names and last names independently. You may want to keep the columns postal code and state together. In This case you would work with two teststeps referring the same CSV file.</li> <li>run randomize teststep and preview results: This command can be run without referenced variables. It displays the randomized values for all enabled columns with their respective formatting.</li> <li>default connect between variables and columns: Each column must be assigned a variable in order for the randomized value to be transferred. This command would create a variable for each enabledcolumn. When you click this button again, the existing variables will be deleted and replaced by a new set of variables.</li> </ul> <p>You may change the variables reference in the. </p>"},{"location":"views-teststeps/#manual-configuration-of-the-variables-transfer","title":"Manual configuration of the variables' transfer","text":"<p>When you select a single line in the output view, the view is split in two vertical sections. The output view shrinks horizontally and provides the option to edit the variables transfer reference.</p> <p></p> <ul> <li>The selected column value displays name and value of the randomized column.</li> <li>The button remove variable reference gives the option to configure a different variable reference by selecting the parent testcase, testset or repository and select one of their attached variables including creating a new variable.</li> <li>variable value displays the current value of the referenced variable. This should be same value as the randomized </li> </ul>"},{"location":"views-teststeps/#formatted-value-list-preview","title":"Formatted value list preview","text":"<p>The formatted value list preview displays all rows in the CSV file with all shown columns and applied formatting for each column.</p> <p></p> <ul> <li>Button Show/hide CSV reading config button (un)discloses a button to show the CSV reading configuration.</li> <li>open configuration button opens a dialog to configure the options when a CSV is read.</li> <li>file url: When you select a file from your desktop, the file url is stored. The file data is read and its contents are stored with the formatting options as separate information.</li> <li>Button source data reads the file url data and displays the data in text file view without overriding any column configurations.</li> <li>number of rows in file displays the number of rows applying the configuration option empty lines.</li> <li>CSV file data with configuration displays the formatted columns. Columns that are disabled are shown with the system' secondary color, this may be gray instead of black text color on your system.</li> </ul>"},{"location":"views-teststeps/#csv-file-reading-options","title":"CSV file reading options","text":"<p>A CSV file may have various textual representations. Depending on your output requirement you may need to modify the default values.</p> <p></p> <ul> <li>You MUST provide row headers</li> <li>you may ignore empty lines, they will not appear as rows in the preview data list</li> <li>Your CSV file may use escaping, verify if the escape character fits</li> <li>Your CSV file may use quotes for your columns</li> <li>You may list a set of false encodings</li> <li>You may list a set of nil encodings</li> <li>You may list a set of true encodings</li> <li>OK saves your changes and dismisses the dialog</li> <li>Cancel flushes your changes and dismisses the dialog</li> </ul>"},{"location":"views-teststeps/#http-teststep-assertion-list","title":"HTTP Teststep assertion list","text":"<p>Testing webservices can become repetitive and cumbersome. Assertions help you to automate checks and free you from repetitive error-prone verifications. You will find more time to further explore responses and find unexpected behaviour. Assertions have their own tab in the HTTP Request view and allow you for editing assertions while viewing the Response.</p> <p></p>"},{"location":"views-teststeps/#assertions_1","title":"Assertions","text":"<p>Assertions help you to assess the validity of a teststeps output. APIJockey TEST provides a set of assertions types depending on the output type unter test.</p>"},{"location":"views-teststeps/#assertion-list","title":"Assertion list","text":"<p>We discuss the list buttons in the order they appear in the view from left to right</p> <ul> <li>Create new HTTP assertion: See HTTP assertion editor</li> <li>Create new JSON assertion with JSONPath. See JSONPath assertion editor</li> <li>Create new Image Assertion. See AI based Image Assertions</li> <li>Create new PDF Assertion. See PDF Assertions</li> <li>Delete selected Assertion(s)</li> <li>Rename selected Assertion</li> <li>Move up selection in the list</li> <li>Move down selection in the list</li> <li>Enable/disable:  An assertion will only be executed, if it is enabled. A disabled assertion appears with grey text color.</li> <li> <p>Run (selected assertion or all assertion):  This button runs all selected elements in the order they appear. If no assertion is selected, the whole list will be run.</p> </li> <li> <p>List of assertions with current result status</p> </li> <li>Displays the name of the assertion and the result status</li> <li>Pasteboard commands</li> </ul> <p>Assertion editor: Empty view in the screenshot, as no Assertion is selected in the list. See details for each type of assertion in the </p>"}]}